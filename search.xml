<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>如何使用Linode架設網站 ? (1/5) 創建Linode</title>
    <url>/2023/07/11/001-Linode-1/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前陣子在做自己的 side project，完成之後想說可以試著架站看看，研究了一陣子終於成功把環境架好並佈署 project，因此想趁記憶還猶新的時候，把架站的過程紀錄下來，所以這系列文章想分享如何透過<span class="markWord">Linode</span>來架設網站的，這次架站前端的 Web Server 是使用 Ngnix 來部署 Angular 專案，後端則使用 Tomcat 部署 Java Spring Boot 專案，資料庫使用 My SQL，最後也會分享這中間遇到的一些問題以及是如何解決的。</p>
<span id="more"></span>

<h2 id="Linode-是什麼"><a href="#Linode-是什麼" class="headerlink" title="Linode 是什麼?"></a>Linode 是什麼?</h2><p>Linode 是一個總部建立於美國紐澤西州加洛偉市的虛擬專用伺服器提供商。它的名字是由英文中 Linux 中的 Li 和 node 構成的混成詞。如同它的名字一樣，Linode 只提供執行 Linux 的伺服器，而不提供執行 Windows Server 或其他作業系統的伺服器。它的服務一向以穩定著稱。</p>
<h2 id="創建一個-Linode-Server"><a href="#創建一個-Linode-Server" class="headerlink" title="創建一個 Linode Server"></a>創建一個 Linode Server</h2><h3 id="註冊-Linode-帳號"><a href="#註冊-Linode-帳號" class="headerlink" title="註冊 Linode 帳號"></a>註冊 Linode 帳號</h3><p>到<a href="https://www.linode.com/"><strong>Linode 官網</strong></a>註冊一個帳號， 這邊可以使用 Google 或 github 帳號來註冊。他會需要輸入要拿來扣款的信用卡資訊及帳單資訊，註冊成功就可以進到 Linode 的管理頁面。</p>
<p><img src="/../image/signUp.jpg" alt="註冊表單"></p>
<h3 id="建立虛擬機"><a href="#建立虛擬機" class="headerlink" title="建立虛擬機"></a>建立虛擬機</h3><p>進到 Linode 的管理頁面後，點選 create linode 進入設定畫面，Images 可以選擇要使用的作業系統，我是使用 Ubuntu 20.04 LTS，<span class="markWord">Ubuntu 是著名的 Linux 發行版之一</span>，也是目前最多使用者的 Linux 版本。Region 可以選擇 Server 的所在地，離我們比較近的可以考慮日本、新加坡，CPU 則是選擇最便宜的 Shared CPU 的 Nanode 1GB，每個月 1GB 的 RAM 及 25G 的容量，目前覺得還蠻夠用的。<br><img src="/../image/linodeServer.jpg" alt="Linode Server"></p>
<p>在『Linode Label』和『Add Tags』兩個欄位區塊，可以分別輸入一個主機識別名稱，另一個為分類標籤，如想要將此次的 VPS 主機用在網頁伺服器，那可以將此主機分類為『Web』標籤。接著需要為此 VPS 主機的系統設定一個『Root Password』root 密碼（密碼等下登入主機會用到，請務必記住好），另外你也可以為你的 Linux 主機設定 SSH 金鑰，設定 SSH 金鑰好處就是可以讓你的主機在登入時更加安全與方便，一般來說如果你登入 Linux 主機，都是使用 username+密碼方式登入 Linux 主機，現在如果你為你的主機設定 SSH 金鑰認證的話，是可以不用輸入密碼就可以直接登入 Linux 主機了，這樣的登入方式會比輸入密碼的方式來的安全與也更加方便，當然如果你不知道要怎麼產生 SSH 金鑰，Linode 也有提供 <a href="https://www.linode.com/docs/guides/use-public-key-authentication-with-ssh"><strong>在不同作業系統上產生 SSH 金鑰的方法</strong></a>。若要為此部 VPS 主機新增 SSH 金鑰，可點選 SSH Keys 區塊的『Add an SSH Key』按鈕來新增新的 SSH 公開金鑰。</p>
<p><img src="/../image/linodeServer2.jpg" alt="Linode Server"></p>
<p>點選 Create Linode 之後 Server 就會開始部署，如下圖所示就可以看到虛擬機目前的狀態已切換成『Running』執行中，接著就能開始管理你的主機了。之後如果要重新啟動主機可以點『Reboot』或將主機關機『Power Off』。</p>
<h3 id="查看虛擬機"><a href="#查看虛擬機" class="headerlink" title="查看虛擬機"></a>查看虛擬機</h3><p><img src="/../image/linodeServer3.jpg" alt="Linode Server"></p>
<p>如果你沒有要使用 SSH 協定的終端機程式，那 Linode 有提供一個不需要安裝任何的瀏覽器擴充套件，就可以很方便的使用瀏覽器來直接遠端存取主機的功能，如下圖所示你可以使用 Linode 的<span class="markWord">『Linose Console』</span>，這功能是可以直接在瀏覽器使用虛擬 Console 來遠端主機，Linode 有提供兩種模式，分別為『Weblish』和『Glish』，前者 Weblish 類似終端機，只能輸入指令控制主機，後者 Glish 為假如你主機的作業系統有提供 GUI 介面，比如有些人會裝 Windows 系統或 Linux 發行版的 Desktop 版本，那就可以使用 Glish 來進行控制你的主機，如果有使用 SSH 則可以使用有支援 SSH 協定的終端機程式來連線至你剛剛建立好的 VPS 主機，例如 putty、x-shell 等，主機 SSH 預設 Port 為 22。</p>
<p><img src="/../image/linodeLish.jpg" alt="Linode Server"></p>
<p>到這裡恭喜你已經完成了建置屬於自己的虛擬機啦，是不是很簡單呢? 下一篇則是要說明如何建置資料庫。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料:"></a>參考資料:</h2><ul>
<li><a href="https://www.kjnotes.com/other/106">Linode VPS 主機帳號申請與伺服器架設使用設定教學</a></li>
<li><a href="https://www.linode.com/docs/guides/set-up-web-server-host-website/">Set up a Web Server and Host a Website on Linode</a></li>
<li><a href="https://www.linode.com/docs/guides/use-public-key-authentication-with-ssh/">Use SSH Public Key Authentication on Linux, macOS, and Windows</a></li>
</ul>
]]></content>
      <categories>
        <category>Server</category>
        <category>Linode</category>
      </categories>
      <tags>
        <tag>Linode</tag>
        <tag>deploy a website</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用Linode架設網站 ? (2/5) 建置資料庫</title>
    <url>/2023/07/13/002-Linode-2/</url>
    <content><![CDATA[<p>這篇將分享要如何在Linode的虛擬機上建置MySQL資料庫以及遠端連線資料庫。</p>
<span id="more"></span>
<p>首先，使用putty或Linode Lish console 登入系統，先更新一下系統套件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update </span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure>

<h2 id="安裝MySQL"><a href="#安裝MySQL" class="headerlink" title="安裝MySQL"></a>安裝MySQL</h2><p>輸入下列指令來安裝MySQL，在安裝的過程中，會被要求要設定root使用者的密碼。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install mysql-server</span><br></pre></td></tr></table></figure>
<h2 id="啟動My-SQL"><a href="#啟動My-SQL" class="headerlink" title="啟動My SQL"></a>啟動My SQL</h2><p>安裝完成後，啟動MySQL服務:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl start mysql</span><br></pre></td></tr></table></figure>
<p>確認MySQL服務是否正常運行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl status mysql</span><br></pre></td></tr></table></figure>
<p>如果服務有正常執行，會看到<span class="markWord">active(running)</span>的狀態，如下圖<br><img src="/../image/mysql.jpg" alt="Mysql"></p>
<p>可選擇加強MySQL安全性，安裝MySQL安全性設定工具，執行安裝後會引導你完成一些安全性的選項設定，例如:刪除匿名使用者、禁止遠端root登入等，可依自己的需求選擇。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mysql_secure_installation </span><br></pre></td></tr></table></figure>

<h2 id="設定MySQL使用者權限"><a href="#設定MySQL使用者權限" class="headerlink" title="設定MySQL使用者權限"></a>設定MySQL使用者權限</h2><p>以root的身分登入MySQL</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mysql</span><br></pre></td></tr></table></figure>

<p>進入後會出現Welcome等文字，游標也會顯示mysql&gt;，表示接下來可以輸入SQL指令了~</p>
<p><img src="/../image/mysql2.jpg"></p>
<p>接下來我們就可以執行下列指令，將使用者root身分認證(IDENTIFIED)的方式改為用密碼驗證(mysql_native_password)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;你設定root的密碼&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>如果是使用MySQL 8.0以上的版本，請使用下列指令:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> caching_sha2_password <span class="keyword">BY</span> <span class="string">&#x27;你設定root的密碼&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>root帳號設定在localhost表示只能在本地主機連接到MySQL，如果要能從遠端連接，可以再新增一個user</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CREATE USER <span class="string">&#x27;使用者名稱&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;要設定的密碼&#x27;</span></span><br></pre></td></tr></table></figure>

<p>設定完成後就刷新權限並離開MySQL</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br><span class="line">EXIT;</span><br></pre></td></tr></table></figure>

<p>接著我們就可以以密碼驗證的方式再次進到MySQL</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>
<p>接下來就是要設定使用者對資料庫的權限:<br>如果要設定root帳號在所有資料庫上的所有權限:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>若只想在特定的資料庫授予權限:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> 資料庫名稱.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;使用者名稱&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>刷新權限<br>FLUSH PRIVILEGES;</p>
<h2 id="匯入資料庫"><a href="#匯入資料庫" class="headerlink" title="匯入資料庫"></a>匯入資料庫</h2><p>進入MySQL:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<p>進入MySQL介面後就可以正常的輸入SQL指令，若遇到多行的指令，也可以換行，比較要注意的是，因為這是SQL指令，所以按enter的時候它是會認分號;作為一段指令的終結，若是沒有輸入分號則會視為換行並不會執行SQL指令。<br><img src="/../image/mysql3.jpg" alt="Mysql"></p>
<p>如果不想用指令的方式操作，也可以使用Workbrench來完成這繁瑣的作業喔，可以直接跳到下一段遠端連線資料庫。</p>
<p>離開MySQL</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXIT;</span><br></pre></td></tr></table></figure>

<h2 id="遠端連線資料庫"><a href="#遠端連線資料庫" class="headerlink" title="遠端連線資料庫"></a>遠端連線資料庫</h2><p>建立完資料庫，我們就可以來遠端連線看看我們建立的資料庫是不是可以正常操作</p>
<h3 id="使用MySQL-Workbrench連線資料庫"><a href="#使用MySQL-Workbrench連線資料庫" class="headerlink" title="使用MySQL Workbrench連線資料庫"></a>使用MySQL Workbrench連線資料庫</h3><p>這是最簡單的方式啦，開啟MySQL Workbrench，新增一個connection，hostname輸入Linode上的IP，輸入username 及密碼完就可以進入到你的資料庫了，不過可以這樣遠端連線有可能是因為我沒有做禁止遠端登入的設定，所以安全性設定那邊也要考量一下自己的需求。</p>
<p><img src="/../image/mysql4.jpg" alt="Mysql"></p>
<h2 id="初始化MySQL"><a href="#初始化MySQL" class="headerlink" title="初始化MySQL"></a>初始化MySQL</h2><p>我在創建的過程中不小心誤刪了MySQL內的某一個目錄，導致MySQL無法正常啟動的情況下，可以考慮這個方式來解決，不過要使用這個方式等於砍掉重練，原本建的db、使用者都要重新設定，建議平常就要備份重要資料。<br>首先，要先刪除&#x2F;var&#x2F;lib&#x2F;mysql 路徑下的所有資料，在執行下列指令</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysqld <span class="comment">--initialize --datadir=/var/lib/mysql</span></span><br></pre></td></tr></table></figure>
<p>初始化完成後啟動MySQL</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl start mysql</span><br></pre></td></tr></table></figure>
<p>執行應該會顯示啟動失敗，這時可以去看error log，會看到有一行note，是root的帳號的暫用密碼，要把那段密碼記下來，之後第一次要用這個密碼登入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">tail</span> -n 50 /var/log/mysql/error.log</span><br></pre></td></tr></table></figure>

<p><img src="/../image/mysql5.jpg" alt="Mysql"></p>
<p>登入MySQL後就可以修改密碼</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;新密碼&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h5 id="到這裡恭喜你已經完成了在Linode上建置資料庫，接下來我們就要進入安裝Web-Server的部分，加油不要放棄喔"><a href="#到這裡恭喜你已經完成了在Linode上建置資料庫，接下來我們就要進入安裝Web-Server的部分，加油不要放棄喔" class="headerlink" title="到這裡恭喜你已經完成了在Linode上建置資料庫，接下來我們就要進入安裝Web Server的部分，加油不要放棄喔~"></a>到這裡恭喜你已經完成了在Linode上建置資料庫，接下來我們就要進入安裝Web Server的部分，加油不要放棄喔~</h5><hr>
]]></content>
      <categories>
        <category>Server</category>
        <category>Linode</category>
      </categories>
      <tags>
        <tag>Linode</tag>
        <tag>deploy a website</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用Linode架設網站 ? (3/5) 建置Tomcat及佈署專案</title>
    <url>/2023/07/16/003-Linode-3/</url>
    <content><![CDATA[<p>接續上一篇創建完資料庫接著就可以來安裝web server了，這篇會分享建置tomcat及部署專案，部署專案的方式目前是手動部署，之後會研究用jenkins來自動化部署，到時候再更新文章。</p>
<span id="more"></span>

<h2 id="安裝tomcat"><a href="#安裝tomcat" class="headerlink" title="安裝tomcat"></a>安裝tomcat</h2><p>以下整理了兩種安裝tomcat的方式，建議可以先使用linode官方提供的方式來安裝tomcat，不行的話在使用第二種方式手動安裝，我自己是使用官方的方式就可以安裝了。</p>
<h3 id="Linode-官方提供"><a href="#Linode-官方提供" class="headerlink" title="Linode 官方提供"></a>Linode 官方提供</h3><h4 id="設定主機名稱"><a href="#設定主機名稱" class="headerlink" title="設定主機名稱"></a>設定主機名稱</h4><p>這邊我是沒有在另外設定，hostname -f 指令會返回當前主機的主機名+域名，hostname預設應該是localhost，這邊我是使用預設的沒有特別設定。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostname</span><br><span class="line">hostname -f</span><br></pre></td></tr></table></figure>

<h4 id="安裝可用更新"><a href="#安裝可用更新" class="headerlink" title="安裝可用更新"></a>安裝可用更新</h4><p>確保當前系統是最新的狀態</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get upgrade</span><br></pre></td></tr></table></figure>

<h4 id="安裝tomcat-1"><a href="#安裝tomcat-1" class="headerlink" title="安裝tomcat"></a>安裝tomcat</h4><p>從 Ubuntu 安裝 Tomcat</p>
<blockquote>
<p>這邊要注意的是，在安裝tomcat9的時候，會一起安裝open jdk11，所以不用在自行安裝jdk</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install tomcat9</span><br></pre></td></tr></table></figure>
<p>另外，可以依自行需求選擇是否要安裝tomcat9-docs、tomcat9-examples和tomcat9-admin</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install tomcat9-docs tomcat9-examples tomcat9-admin</span><br></pre></td></tr></table></figure>

<h4 id="啟動服務"><a href="#啟動服務" class="headerlink" title="啟動服務"></a>啟動服務</h4><p>安裝完成後我們就可以啟動tomcat服務啦</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl start tomcat9</span><br></pre></td></tr></table></figure>

<p>另外如果要停止或重啟服務可以執行下列指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop tomcat9</span><br><span class="line">sudo systemctl restart tomcat9</span><br></pre></td></tr></table></figure>

<h3 id="手動安裝"><a href="#手動安裝" class="headerlink" title="手動安裝"></a>手動安裝</h3><h4 id="安裝JDK"><a href="#安裝JDK" class="headerlink" title="安裝JDK"></a>安裝JDK</h4><p>執行以下指令安裝OpenJDK，記得要把jdk11&#x2F;11.0.12換成自己要安裝的版本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo wget https://download.java.net/java/GA/jdk11/11.0.12/GPL/openjdk-11.0.12_linux-x64_bin.tar.gz</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="下載tomcat"><a href="#下載tomcat" class="headerlink" title="下載tomcat"></a>下載tomcat</h4><p>可以到<a href="https://archive.apache.org/dist/tomcat"><strong>Apache官網</strong></a>複製要下載的版本網址，執行下列指令，即可安裝</p>
<p><img src="/../image/tomcat1.jpg" alt="tomcat"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://archive.apache.org/dist/tomcat/tomcat-10/v10.0.8/bin/apache-tomcat-10.0.8.tar.gz</span><br></pre></td></tr></table></figure>

<h4 id="解壓縮tomct"><a href="#解壓縮tomct" class="headerlink" title="解壓縮tomct"></a>解壓縮tomct</h4><p>使用tar指令來解壓縮下載的tomcat檔案</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo tar xvf apache-tomcat-10.0.8.tar.gz /opt/tomcat</span><br></pre></td></tr></table></figure>

<p>將解壓縮好的tomcat目錄移動適當的目錄(建議&#x2F;opt底下)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mv</span> apache-tomcat-10.0.8 /opt/tomcat</span><br></pre></td></tr></table></figure>

<h4 id="設定環境變數"><a href="#設定環境變數" class="headerlink" title="設定環境變數"></a>設定環境變數</h4><p>回到根目錄，編輯根目錄的.bashrc，新增下列指令至.bashrc檔案</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> CATALINA_HOME=<span class="string">&quot;/opt/tomcat&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH= <span class="string">&quot;<span class="variable">$CATALINA_HOME</span>/bin:<span class="variable">$PATH</span>&quot;</span></span><br></pre></td></tr></table></figure>
<p>執行下列指令使變更的內容生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>

<h4 id="啟動服務-1"><a href="#啟動服務-1" class="headerlink" title="啟動服務"></a>啟動服務</h4><p>啟動tomcat服務</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">catalina.sh.start</span><br></pre></td></tr></table></figure>
<p>然後就可以輸入http:&#x2F;&#x2F;你的ip:8080，這時候應該會看到tomcat預設的畫面就完成啦</p>
<p>如果想停止服務</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">catalina.sh.stop</span><br></pre></td></tr></table></figure>

<h2 id="佈署專案"><a href="#佈署專案" class="headerlink" title="佈署專案"></a>佈署專案</h2><p>打包專案之前，可以先檢查設定檔資料庫的連線設定是否已經改成linode上的資料庫了，檢查完後在本地端使用Maven或Gradle將專案打包好jar或war檔，將打包好的檔案放置tomcat底下的&#x2F;webapps目錄下，這時如果你的tomcat本身已經是開啟的狀態，tomcat通常會自動重啟，並在&#x2F;webapps目錄下自動生成一個以你的jar或war檔檔名命名的目錄，如果沒有看到tomcat自動生成的目錄，可以根據上面的步驟重啟tomcat，看到這個目錄表示專案已經佈署到tomcat了，接著就可以透過postman等工具來測試服務是否正常，路徑為 http:&#x2F;&#x2F;你的ip:8080&#x2F;佈署檔案名稱 ，如果想看log可以到&#x2F;vsr&#x2F;log&#x2F;tomcat9目錄下的catalina.out就可以看到了。</p>
<p><img src="/../image/tomcat2.jpg" alt="tomcat"></p>
<p>到這裡恭喜你已經完成建置tomcat和佈署專案了，如果想要更進一步測試功能可以將自己的前端網頁call http請求的時候直接指向到linode的ip就可以了。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料:"></a>參考資料:</h2><ul>
<li><a href="https://www.digitalocean.com/community/tutorials/install-tomcat-9-ubuntu-1804">How To Install Apache Tomcat 9 on Ubuntu 18.04</a></li>
<li><a href="https://www.linode.com/docs/guides/development/frameworks/apache-tomcat/">Linode關於Apache Tomcat</a></li>
<li><a href="https://www.linode.com/docs/guides/apache-tomcat-on-ubuntu-18-04/">Linode 在 Ubuntu 18.04 上安裝 Apache Tomcat</a></li>
</ul>
]]></content>
      <categories>
        <category>Server</category>
        <category>Linode</category>
      </categories>
      <tags>
        <tag>Linode</tag>
        <tag>deploy a website</tag>
        <tag>tomcat</tag>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用Linode架設網站 ? (5/5) 架站問題分享</title>
    <url>/2023/07/18/005-Linode-5/</url>
    <content><![CDATA[<p>會想寫Linode系列的分享，主要是因為這是我第一次自己架站，發現網路上的資訊很多比較零碎或是已經是幾年前的資訊了，希望可以將整個過程紀錄下來，雖然可能會依使用的作業系統、程式語言不同而有所差異，但還是多少可以參考，接下來就想分享一下我在架站過程中遇到的一些問題，說不定也有人會遇到，雖然有些已經忘了但就盡量紀錄囉~</p>
<span id="more"></span>
<h2 id="使用putty和Linode登入server後，游標就鎖住無法輸入任何指令"><a href="#使用putty和Linode登入server後，游標就鎖住無法輸入任何指令" class="headerlink" title="使用putty和Linode登入server後，游標就鎖住無法輸入任何指令"></a>使用putty和Linode登入server後，游標就鎖住無法輸入任何指令</h2><p>這個問題真的很少見，也是困擾了我好幾天，記得好像是裝完nginx的時候，登出後進來就這樣了，嘗試了很多方式都無解，後來詢問Linode客服，通信了好幾次，終於在linode lish console上有解決這個問題，先按<span class="mark">ctrl + Z</span>再按<span class="mark">ctrl + C</span>就可以解除鎖定的游標正常輸入了，但是對putty沒用，也有試過x-shell一樣無解，後來我就只能用linode lish console輸入指令。<br><a href="https://www.maketecheasier.com/fix-cant-type-in-terminal-issue-linux/">Linode客服提供的資料</a></p>
<p><img src="/../image/q1.jpg" alt="question"></p>
<hr>
<h2 id="Linode-對SMTP的限制"><a href="#Linode-對SMTP的限制" class="headerlink" title="Linode 對SMTP的限制"></a>Linode 對SMTP的限制</h2><p>如果你的專案是會用到SMTP寄送email的功能，就會遇到當你專案佈署上去的時候，要寄出信件時會有連線time out 的問題，這其實是因為linode限制SMTP的功能，要向他們申請才可以使用這項功能，可以聯繫他們的客服申請，他們會請你提供相關的資訊，像是會在什麼情況下寄送email等，審核通過之後他們就會解除對SMTP的限制，就可以使用了，但這塊我後來還沒實際驗證過，不確定是不是這樣就可以寄送email</p>
<p><img src="/../image/q2.jpg" alt="question"></p>
<hr>
<h2 id="無法連線上Linode的MySQL"><a href="#無法連線上Linode的MySQL" class="headerlink" title="無法連線上Linode的MySQL"></a>無法連線上Linode的MySQL</h2><ol>
<li>先確認Linode上的Mysql是可以正常運作的</li>
<li>檢查&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d目錄下的mysqld.cnf的mysqlx-bind-address是不是還是<span class="markWord">localhost</span>，如果還是要改成<span class="markWord">127.0.0.1</span></li>
<li>檢查設定的使用者是否有足夠的權限</li>
<li>檢查防火牆設定允許從外部連線到Mysql伺服器的port(預設3306)</li>
</ol>
<hr>
]]></content>
      <categories>
        <category>Server</category>
        <category>Linode</category>
      </categories>
      <tags>
        <tag>Linode</tag>
        <tag>SSL</tag>
        <tag>domain</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用Linode架設網站 ? (4/5) 建置Nginx及SSL憑證申請</title>
    <url>/2023/07/18/004-Linode-4/</url>
    <content><![CDATA[<p>建至完tomcat及佈署專案後，接著就差最後一步就可以擁有自己的網頁了，就是要把前端的專案部署到Nginx就大功告成啦，所以我們趕快開始吧~</p>
<span id="more"></span>

<h2 id="安裝Nginx"><a href="#安裝Nginx" class="headerlink" title="安裝Nginx"></a>安裝Nginx</h2><p>確保當前系統是最新的狀態</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update </span><br></pre></td></tr></table></figure>

<p>安裝Nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install nginx </span><br></pre></td></tr></table></figure>

<p>配置防火牆，如果在linode上啟用了防火牆，要確保允許HTTP可以通過</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw allow <span class="string">&#x27;Nginx HTTP&#x27;</span> </span><br></pre></td></tr></table></figure>

<p>如果之後想啟用HTTPS，可執行以下指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw allow <span class="string">&#x27;Nginx HTTPS&#x27;</span> </span><br></pre></td></tr></table></figure>

<p>安裝完成後，Nginx會自動啟動，可以執行下列指令來查看Nginx的服務狀態</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl status nginx</span><br></pre></td></tr></table></figure>
<p>如果nginx服務正常運作會看到以下畫面</p>
<p><img src="/../image/nginx1.jpg" alt="nginx"></p>
<p>驗證安裝可以輸入http:&#x2F;&#x2F;你的ip 看看是不是有出現nginx的預設畫面</p>
<h2 id="佈署Angular專案"><a href="#佈署Angular專案" class="headerlink" title="佈署Angular專案"></a>佈署Angular專案</h2><p>在Angular專案上執行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng build --prod</span><br></pre></td></tr></table></figure>
<p>執行後會發現Angular專案目錄下多了&#x2F;dist目錄，裡面會有將專案生成的js及其他靜態資源，將dist內的文件透過WinSCP或下指令的方式傳送到linode的 &#x2F;var&#x2F;www底下</p>
<p><img src="/../image/nginx2.jpg" alt="nginx"></p>
<h2 id="設定nginx配置"><a href="#設定nginx配置" class="headerlink" title="設定nginx配置"></a>設定nginx配置</h2><p>到&#x2F;etc&#x2F;nginx&#x2F;sites-available目錄下，應該會看到一個叫default的檔案，然後開啟編輯模式添加以下配置:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    <span class="comment">#預設Port</span></span><br><span class="line">    listen 80 default_server;</span><br><span class="line">    listen [::]:80 default_server;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#你的Angular專案路徑</span></span><br><span class="line">    root /var/www/jolui;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#默認首頁為angular 的index.html</span></span><br><span class="line">    index index.html;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#你的Server IP</span></span><br><span class="line">    server_name 139.XXX.XX.XX;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#設定專案的請求路徑URL，找不到該路徑則會返回index.html</span></span><br><span class="line">    location /product&#123;</span><br><span class="line">        try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">     location /orderlist &#123;</span><br><span class="line">        try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">        &#125;</span><br><span class="line">    location /cartitem&#123;</span><br><span class="line">        try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">#設定後端專案路徑，這邊的路徑要跟當初設定的專案路徑一樣</span></span><br><span class="line">     location /jolserver&#123;</span><br><span class="line">        proxy_pass http://localhost:8080;</span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置設定完成後，要重啟nginx服務才會生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure>
<p>重啟後，就可以輸入 http:&#x2F;&#x2F;你的ip 來驗證是否佈署成功<br><img src="/../image/index.gif" alt="index and product"></p>
<h2 id="申請SSL憑證"><a href="#申請SSL憑證" class="headerlink" title="申請SSL憑證"></a>申請SSL憑證</h2><p>雖然我們已經成功架站，但是少了https安全協定，就變成不安全的網頁，因此可以透過ZeroSSL申請免費的憑證來使用，不過免費版的憑證只有90天的效期。申請ZeroSSL憑證的流程，可以參考下面的網站我覺得說明得很清楚，只是裡面提到的電子郵件的驗證方式現在已經沒有了，只能使用HTTP文件上傳的驗證方式。</p>
<p><a href="https://www.mytechgirl.com/tw/how-to/add-ssl-to-website-free-mtg6688.html">ZeroSSL憑證申請教學</a></p>
<p>申請完憑證後會有certificate.crt 和 private.key兩個檔案，分別放到&#x2F;etc&#x2F;ssl&#x2F;certs和&#x2F;etc&#x2F;ssl&#x2F;private目錄下，再到Nginx的defult配置檔進行設定:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"><span class="comment"># SSL configuration</span></span><br><span class="line">     listen 443 ssl default_server;</span><br><span class="line">     listen [::]:443 ssl default_server;</span><br><span class="line">     <span class="comment">#憑證的檔案路徑</span></span><br><span class="line">     ssl_certificate /etc/ssl/certs/certificate.crt;</span><br><span class="line">        ssl_certificate_key /etc/ssl/private/private.key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置設定完成後，重啟nginx服務</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure>

<p>然後就可以透過https:&#x2F;&#x2F;來訪問你的網頁了，可以考慮申請一個domain就更完整囉，下面提供一個免費domain的影片教學，有需要的可以參考看看囉~</p>
<p><a href="https://www.youtube.com/watch?v=s5f3Rdl5r5I&vl=zh-TW">免費域名教學</a></p>
<p><a href="https://ocean-hcz.com/">我佈署的Linode</a></p>
<p><a href="https://www.maketecheasier.com/fix-cant-type-in-terminal-issue-linux/">https://www.maketecheasier.com/fix-cant-type-in-terminal-issue-linux/</a></p>
<h5 id="到這裡恭喜你已經成功在linode上建置自己的網站啦，到這裡linode架站的步驟就全部結束了-下一篇要分享我在使用linode建置網頁的過程遇到的一些問題分享"><a href="#到這裡恭喜你已經成功在linode上建置自己的網站啦，到這裡linode架站的步驟就全部結束了-下一篇要分享我在使用linode建置網頁的過程遇到的一些問題分享" class="headerlink" title="到這裡恭喜你已經成功在linode上建置自己的網站啦，到這裡linode架站的步驟就全部結束了~ 下一篇要分享我在使用linode建置網頁的過程遇到的一些問題分享"></a>到這裡恭喜你已經成功在linode上建置自己的網站啦，到這裡linode架站的步驟就全部結束了~ 下一篇要分享我在使用linode建置網頁的過程遇到的一些問題分享</h5><hr>
]]></content>
      <categories>
        <category>Server</category>
        <category>Linode</category>
      </categories>
      <tags>
        <tag>Linode</tag>
        <tag>deploy a website</tag>
        <tag>Nginx</tag>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用Render免費部署網頁? (1/3)部署前端專案</title>
    <url>/2023/07/20/006-Render-1/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>會開始研究Render也算是誤打誤撞，前一篇分享在Linode遇到的問題有提到我的登入後游標就被鎖住，那時候正好後端都佈署完成就差前端了，這個問題遲遲無法解決卡了一好幾天，那時後就再想也許前端可以佈署再其他雲端平台上，就有了這篇的誕生，會選擇Render是因為Heroku已經沒有提供免費的方案，<span id="more"></span>而且支援非常多種語言的建構服務，基本上前後端都可以再這裡佈署，但因為我後端有linode了就沒有再研究後端的部分，這篇主要是針對前端部署來分享。</p>
<h2 id="Render-簡介"><a href="#Render-簡介" class="headerlink" title="Render 簡介"></a>Render 簡介</h2><p>Render是一個PaaS（ Platform as a service）雲端服務，也就是說你的程式碼部署到 Render 之後，你不用管 Linux&#x2F;firewall&#x2F;nginx 的設定。只要在Render上設定好github網址，設可以做到一鍵佈署，對於只要佈署一個小型專案或side project的人來說非常方便，Render提供的免費方案對小型專案很夠用了，只是和Heroku一樣的是，系統超過15分鐘沒使用，系統就會自動進入休眠模式，下次開啟的時候就會需要多等一些時間。</p>
<h2 id="建置Render"><a href="#建置Render" class="headerlink" title="建置Render"></a>建置Render</h2><p>首先，先確認你的專案是否已經佈署到github上了，因為佈署的過程會直接連到你的github的repository</p>
<h3 id="註冊Render帳號"><a href="#註冊Render帳號" class="headerlink" title="註冊Render帳號"></a>註冊Render帳號</h3><p>到<a href="https://render.com/">Render官網</a>註冊一個帳號，這邊可以選擇直接用github、gitlab或是google帳號直接註冊，因為我的專案是佈署到github上，所以我是選用github帳號來註冊</p>
<p><img src="/../image/render.png" alt="render"></p>
<h3 id="創建Web-Service"><a href="#創建Web-Service" class="headerlink" title="創建Web Service"></a>創建Web Service</h3><p>註冊完登入進去後就可以進到render的dashborad，點選&gt; New+ &gt; Web Service</p>
<p><img src="/../image/render2.jpg" alt="render"></p>
<p>這邊它會幫你直接把你有的repository列出來，選擇一個你要佈署的repository點選connect</p>
<p><img src="/../image/render3.jpg" alt="render"></p>
<p>如果你的repository沒有出現在列表上，可以點旁邊的「Configure account」進入到 GitHub 頁面調整一下權限，可能是你的GitHub 帳號在註冊時沒有給予 Render 權限，因此你可以在這邊重新給予權限。到 GitHub 之後，你就可以在底下選擇你要「All repositories」還是「Only select repositories」，而這邊我是選擇「Only select repositories」，選好你要部署的儲存庫後，按下 Save 按鈕，就會被自動回到 Render 頁面就可以看到它出現在你的列表上了</p>
<p><img src="/../image/render4.jpg" alt="render"></p>
<p>點選connect之後就可以會進入到伺服器設定畫面</p>
<p><img src="/../image/render5.jpg" alt="render"></p>
<ol>
<li><strong>Name</strong> 這邊設定的name到時候會變成佈署完的URL，例如我取名叫jolBoutique網址就會變成<a href="https://jol-boutique.onrender.com/">https://jol-boutique.onrender.com</a></li>
<li><strong>Region</strong> Server所在區域，可以選擇離我們最近的新加坡。</li>
<li><strong>Branch</strong> 要佈署哪一個分支</li>
<li><strong>Runtime</strong> 程式環境</li>
<li><strong>Build Command</strong> 佈署指令，yarn就等同於yarn install命令。Yarn是一個類似npm的打包管理工具，但是比npm要快。</li>
<li><strong>Start Command</strong> 運行指令，node server.js (根據你的入口js填寫)</li>
</ol>
<p>同一頁的下面，可以選擇方案，這邊可以選免費的free</p>
<p><img src="/../image/render6.jpg" alt="render"></p>
<p>點選Advanced可以做一些進階設定<br><strong>Add Environment Variable</strong>可以在這邊設置你的環境變數，也可以在<strong>Add Secret File</strong>新增.env文件<br>Auto-Deploy的預設值是Yes，表示只要你的GitHub的repostitory有更新，它就會自動幫你佈署到render上，如果不想自動佈署可以輸入No</p>
<p><img src="/../image/render7.jpg" alt="render"></p>
<p>接著就可以點Create Web Service來開始佈署專案啦，然後就可以看到佈署過程的log<br>最後看到<span class="markWord"> Server running on port 10000</span>或是狀態顯示Deployed就代表已經佈署完成了，就可以點選左上方的網址來查看佈署好的網頁。</p>
<p><img src="/../image/render8.jpg" alt="render"></p>
<p><a href="https://jol-boutique.onrender.com/">我佈署的Render</a></p>
<hr>
]]></content>
      <categories>
        <category>Server</category>
        <category>Render</category>
      </categories>
      <tags>
        <tag>Render</tag>
      </tags>
  </entry>
  <entry>
    <title>使用ObjectMapper把Json轉成Java Bean</title>
    <url>/2023/07/28/007-ObjectMapper/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在工作開發的時候，時常需要將一串攏長又複雜Json字串轉成JavaBean傳給前端，使用<span class ="markWord">ObjectMapper</span>來轉換就很方便，如果之後有調整欄位，也很方便修改，下面會分成JSON陣列和非陣列的資料來說明。Jackson ObjectMapper 是 Java 中應用非常廣泛的序列化、反序列化的工具，它可以幫助我們簡單、快速將 Java 物件與 json 之間作轉換，Spring Framework 將它作為預設轉換器。</p>
<span id="more"></span>

<h2 id="非JSON陣列"><a href="#非JSON陣列" class="headerlink" title="非JSON陣列"></a>非JSON陣列</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;custId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;186750&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;custName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;AKEKR&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;A&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2023/07/11&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;orderNo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;01235&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">2250</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;totAmt&quot;</span><span class="punctuation">:</span> <span class="number">1401500</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ordList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;prodId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;02&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="string">&quot;300&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;qty&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>設定對應的Java Bean，<span class ="markWord">@JsonProperty內設定的欄位名稱必須和json的key值一模一樣</span>，如果Json的key和Java Bean內的物件名稱一樣，則可以不用使用@JsonProperty定義。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OUT</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String custId;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String category;</span><br><span class="line">    <span class="keyword">private</span> String date;</span><br><span class="line">    <span class="keyword">private</span> String orderNo;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> price;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> totAmt;</span><br><span class="line">    <span class="keyword">private</span> List&lt;ORDER&gt; ordList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;ORDER&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OUT</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OUT</span><span class="params">(<span class="meta">@JsonProperty(&quot;custId&quot;)</span> String custId, <span class="meta">@JsonProperty(&quot;type&quot;)</span> String type,</span></span><br><span class="line"><span class="params">        <span class="meta">@JsonProperty(&quot;category&quot;)</span> String category, <span class="meta">@JsonProperty(&quot;date&quot;)</span> String date,</span></span><br><span class="line"><span class="params">        <span class="meta">@JsonProperty(&quot;orderNo&quot;)</span> String orderNo,<span class="meta">@JsonProperty(&quot;price&quot;)</span> <span class="type">int</span> price,</span></span><br><span class="line"><span class="params">        <span class="meta">@JsonProperty(&quot;totAmt&quot;)</span> <span class="type">int</span> totAmt, <span class="meta">@JsonProperty(&quot;ordList&quot;)</span> ArrayList&lt;OrdPrice&gt; ordList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.custId = custId;</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">        <span class="built_in">this</span>.category = category;</span><br><span class="line">        <span class="built_in">this</span>.date = date;</span><br><span class="line">        <span class="built_in">this</span>.orderNo = orderNo;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">        <span class="built_in">this</span>.totQty = totQty;</span><br><span class="line">        <span class="built_in">this</span>.totAmt = totAmt;</span><br><span class="line">        <span class="built_in">this</span>.ordList = ordList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ORDER</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String prodId;</span><br><span class="line">    <span class="keyword">private</span> String price;</span><br><span class="line">    <span class="keyword">private</span> String qty;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ORDER</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ORDER</span><span class="params">(<span class="meta">@JsonProperty(&quot;prodId&quot;)</span> String prodId, <span class="meta">@JsonProperty(&quot;price&quot;)</span> <span class="type">int</span> price,</span></span><br><span class="line"><span class="params">        <span class="meta">@JsonProperty(&quot;qty&quot;)</span> <span class="type">int</span> qty)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.prodId = prodId;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">        <span class="built_in">this</span>.qty = qty;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>接著就可以使用ObjectMapper的readFor()方法來讀取Json字串並轉呈Java物件，這邊要注意的是，若之後Json有多加欄位，Bean沒有同步調整則會報錯，因此可以多加下面這一行來忽略未知欄位。這邊盡量避免每次都執行 new ObjectMapper() ，在系統遭遇高併發（High Concurrency）情況下，這種寫法很容易出現效能瓶頸。若每次序列化&#x2F;反序列化都使用 new ObjectMapper，比起共用一個 ObjectMapper，執行時間至少相差五倍</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"><span class="comment">// 忽略未知的欄位</span></span><br><span class="line">mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>);</span><br><span class="line"><span class="type">OUT</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OUT</span>();</span><br><span class="line">out = mapper.readerFor(Result.class).readValue(jsonStr);</span><br></pre></td></tr></table></figure>

<h2 id="JSON陣列"><a href="#JSON陣列" class="headerlink" title="JSON陣列"></a>JSON陣列</h2><p>與非JSON陣列不同的地方是無法使用readFor().readValue()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"><span class="comment">// 忽略未知的欄位</span></span><br><span class="line">mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>);</span><br><span class="line"><span class="type">OUT</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OUT</span>();</span><br><span class="line">outList = mapper.readValue(jsonStr, <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;List&lt;OUT&gt;&gt;() &#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="JSON-Property檢查"><a href="#JSON-Property檢查" class="headerlink" title="JSON Property檢查"></a>JSON Property檢查</h2><p>如果要檢查JSON字串內的欄位和JavaBean是否一致，可以將Java Bean和JSON字串分別轉成JsonNode，再逐一比對。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkOrderJson</span><span class="params">(String plainString)</span> <span class="keyword">throws</span> CodeException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        plainString = plainString.substring(plainString.indexOf(<span class="string">&quot;,&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">        log.info(<span class="string">&quot;plainString:&#123;&#125;&quot;</span>, plainString);</span><br><span class="line">        <span class="type">DATA</span> <span class="variable">data</span> <span class="operator">=</span> mapper.readValue(plainString, DATA.class);</span><br><span class="line">        <span class="type">JsonNode</span> <span class="variable">jsonNode</span> <span class="operator">=</span> mapper.readTree(plainString);</span><br><span class="line">        List&lt;String&gt; missingFields = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">JsonNode</span> <span class="variable">beanNode</span> <span class="operator">=</span> mapper.valueToTree(data);</span><br><span class="line">        compareFields(jsonNode, beanNode, <span class="string">&quot;&quot;</span>, missingFields);</span><br><span class="line">        <span class="keyword">if</span>(! missingFields.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CodeException</span>(ISPServerCodes.JSON_KEY_NOT_FOUND, missingFields);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CodeException</span>(ISPServerCodes.JSON_PROCESS_ERROR, e.getMessage());</span><br><span class="line">    &#125;        </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">compareFields</span><span class="params">(JsonNode jsonNode, JsonNode beanNode, String currentPath, List&lt;String&gt; missingFields)</span> &#123;</span><br><span class="line">    Iterator&lt;String&gt; fieldNames = beanNode.fieldNames();</span><br><span class="line">    <span class="keyword">while</span> (fieldNames.hasNext()) &#123;</span><br><span class="line">        <span class="comment">//property name</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fieldName</span> <span class="operator">=</span> fieldNames.next().toString();</span><br><span class="line">        <span class="comment">//property path</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fieldPath</span> <span class="operator">=</span> currentPath.isEmpty() ? fieldName : currentPath + <span class="string">&quot;.&quot;</span> + fieldName;</span><br><span class="line">        <span class="keyword">if</span> (!jsonNode.has(fieldName)) &#123;</span><br><span class="line">            missingFields.add(fieldPath);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">JsonNode</span> <span class="variable">subJsonNode</span> <span class="operator">=</span> jsonNode.get(fieldName);</span><br><span class="line">            <span class="type">JsonNode</span> <span class="variable">subBeanNode</span> <span class="operator">=</span> beanNode.get(fieldName);</span><br><span class="line">            <span class="keyword">if</span> (subJsonNode.isObject() &amp;&amp; subBeanNode.isObject()) &#123;</span><br><span class="line">                compareFields(subJsonNode, subBeanNode, fieldPath, missingFields);</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="comment">//第一層List檢查</span></span><br><span class="line">            <span class="keyword">if</span> (subBeanNode.isArray() &amp;&amp; subJsonNode.isArray()) &#123;</span><br><span class="line">                <span class="keyword">if</span>(subBeanNode.size() &gt; subJsonNode.size()) &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; subJsonNode.size(); i++) &#123;</span><br><span class="line">                        missingFields.add(fieldPath + <span class="string">&quot;[&quot;</span> + i + <span class="string">&quot;]&quot;</span>); </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//第二層List</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; subBeanNode.size(); i++) &#123;</span><br><span class="line">                    <span class="type">JsonNode</span> <span class="variable">sndJsonNode</span> <span class="operator">=</span> subJsonNode.get(i);</span><br><span class="line">                    <span class="type">JsonNode</span> <span class="variable">sndBeanNode</span> <span class="operator">=</span> subBeanNode.get(i);</span><br><span class="line">                    <span class="keyword">if</span>(sndJsonNode.isObject() &amp;&amp; sndBeanNode.isObject()) &#123;</span><br><span class="line">                        compareFields(sndJsonNode, sndBeanNode, fieldPath + <span class="string">&quot;[&quot;</span> + i + <span class="string">&quot;]&quot;</span>, missingFields);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DATA</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String condiType;</span><br><span class="line">    <span class="keyword">private</span> String act;        </span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line">    <span class="keyword">private</span> String ts;</span><br><span class="line">    <span class="keyword">private</span> List &lt;RECS&gt; recs;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DATA</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DATA</span><span class="params">(<span class="meta">@JsonProperty(&quot;condiType&quot;)</span> String condiType, <span class="meta">@JsonProperty(&quot;act&quot;)</span> String act, </span></span><br><span class="line"><span class="params">        <span class="meta">@JsonProperty(&quot;userId&quot;)</span> String userId, <span class="meta">@JsonProperty(&quot;ts&quot;)</span> String ts, </span></span><br><span class="line"><span class="params">        <span class="meta">@JsonProperty(&quot;recs&quot;)</span>  ArrayList&lt;RECS&gt; recs)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.condiType = condiType;</span><br><span class="line">        <span class="built_in">this</span>.act = act;</span><br><span class="line">        <span class="built_in">this</span>.userId = userId;</span><br><span class="line">        <span class="built_in">this</span>.ts = ts;</span><br><span class="line">        <span class="built_in">this</span>.recs = recs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">RECS</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String stryCode;</span><br><span class="line">    <span class="keyword">private</span> String con_subtype;</span><br><span class="line">    <span class="keyword">private</span> String washKind;</span><br><span class="line">    <span class="keyword">private</span> String action;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> String sym;</span><br><span class="line">    <span class="keyword">private</span> String mkt;</span><br><span class="line">    <span class="keyword">private</span> String mktSub;</span><br><span class="line">    <span class="keyword">private</span> String custNo;</span><br><span class="line">    <span class="keyword">private</span> String acctNo;</span><br><span class="line">    <span class="keyword">private</span> String conditions_relation;</span><br><span class="line">    <span class="keyword">private</span> List&lt;ORDER&gt; orders;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RECS</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RECS</span><span class="params">(<span class="meta">@JsonProperty(&quot;condiType&quot;)</span> String stryCode, <span class="meta">@JsonProperty(&quot;con_subtype&quot;)</span> String con_subtype,</span></span><br><span class="line"><span class="params">        <span class="meta">@JsonProperty(&quot;washKind&quot;)</span> String washKind, <span class="meta">@JsonProperty(&quot;action&quot;)</span> String action,</span></span><br><span class="line"><span class="params">        <span class="meta">@JsonProperty(&quot;email&quot;)</span> String email, <span class="meta">@JsonProperty(&quot;sym&quot;)</span> String sym,</span></span><br><span class="line"><span class="params">        <span class="meta">@JsonProperty(&quot;mkt&quot;)</span> String mkt, <span class="meta">@JsonProperty(&quot;mktSub&quot;)</span> String mktSub,</span></span><br><span class="line"><span class="params">        <span class="meta">@JsonProperty(&quot;custNo&quot;)</span> String custNo, <span class="meta">@JsonProperty(&quot;acctNo&quot;)</span>  String acctNo,</span></span><br><span class="line"><span class="params">        <span class="meta">@JsonProperty(&quot;conditions_relation&quot;)</span> String conditions_relation, <span class="meta">@JsonProperty(&quot;conditions&quot;)</span>  ArrayList&lt;CONDITION&gt; conditions,</span></span><br><span class="line"><span class="params">        <span class="meta">@JsonProperty(&quot;orders&quot;)</span>  ArrayList&lt;ORDER&gt; orders)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stryCode = stryCode;</span><br><span class="line">        <span class="built_in">this</span>.con_subtype = con_subtype;</span><br><span class="line">        <span class="built_in">this</span>.washKind = washKind;</span><br><span class="line">        <span class="built_in">this</span>.action = action;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">        <span class="built_in">this</span>.sym = sym;</span><br><span class="line">        <span class="built_in">this</span>.mkt = mkt;</span><br><span class="line">        <span class="built_in">this</span>.mktSub = mktSub;</span><br><span class="line">        <span class="built_in">this</span>.custNo = custNo;</span><br><span class="line">        <span class="built_in">this</span>.acctNo = acctNo;</span><br><span class="line">        <span class="built_in">this</span>.conditions_relation = conditions_relation;</span><br><span class="line">        <span class="built_in">this</span>.conditions = conditions;</span><br><span class="line">        <span class="built_in">this</span>.orders = orders;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ORDER</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String belongTo;</span><br><span class="line">    <span class="keyword">private</span> String odrPrcType;</span><br><span class="line">    <span class="keyword">private</span> String orderPrice;</span><br><span class="line">    <span class="keyword">private</span> String priceFlag;</span><br><span class="line">    <span class="keyword">private</span> String orderFlag;</span><br><span class="line">    <span class="keyword">private</span> String bs;</span><br><span class="line">    <span class="keyword">private</span> String orderVol;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ORDER</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ORDER</span><span class="params">(<span class="meta">@JsonProperty(&quot;belongTo&quot;)</span> String belongTo, <span class="meta">@JsonProperty(&quot;odrPrcType&quot;)</span> String odrPrcType, </span></span><br><span class="line"><span class="params">        <span class="meta">@JsonProperty(&quot;orderPrice&quot;)</span> String orderPrice, <span class="meta">@JsonProperty(&quot;priceFlag&quot;)</span> String priceFlag, </span></span><br><span class="line"><span class="params">        <span class="meta">@JsonProperty(&quot;orderFlag&quot;)</span> String orderFlag,<span class="meta">@JsonProperty(&quot;bs&quot;)</span> String bs, <span class="meta">@JsonProperty(&quot;orderVol&quot;)</span> String orderVol)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.belongTo = belongTo;</span><br><span class="line">        <span class="built_in">this</span>.odrPrcType = odrPrcType;</span><br><span class="line">        <span class="built_in">this</span>.orderPrice = orderPrice;</span><br><span class="line">        <span class="built_in">this</span>.priceFlag = priceFlag;</span><br><span class="line">        <span class="built_in">this</span>.orderFlag = orderFlag;</span><br><span class="line">        <span class="built_in">this</span>.bs = bs;</span><br><span class="line">        <span class="built_in">this</span>.orderVol = orderVol;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JSON</tag>
        <tag>parser</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 274. H-Index</title>
    <url>/2023/10/12/008-LeetCode-274/</url>
    <content><![CDATA[<p>在解這題之前可以先稍微了解一下H Index(H指數)，下面是維基百科上的定義:<br>H指數的計算基於其研究者的論文數量及其論文被引用的次數。赫希認為：<span class ="markWord">一個人在其所有學術文章中有N篇論文分別被引用了至少N次，他的H指數就是N。</span>如美國耶魯大學免疫學家理察·弗來沃發表的900篇文章中，有107篇被引用了107次以上，他的H指數是107。可以按照如下方法確定某人的H指數：</p>
<ol>
<li>將其發表的所有SCI論文來源請求按被引次數從高到低排序；</li>
<li>從前往後查找排序後的列表，只要當前的引用量大於當前的索引值，則H指數加1，最後得到的結果即為最終的H指數。<span id="more"></span></li>
</ol>
<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p><img src="/../image/leecode274.jpg" alt="leetcode"></p>
<h2 id="Solution-1-Binary-Search"><a href="#Solution-1-Binary-Search" class="headerlink" title="Solution 1- Binary Search"></a>Solution 1- Binary Search</h2><p>從題目的敘述可判斷H index最大值為<span class ="markWord">citations陣列長度</span>，最小值則為0，利用這個範圍用Binary Search找出H index。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hIndex</span><span class="params">(<span class="type">int</span>[] citations)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> citations.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">            mid = (high + low + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> num : citations) &#123;</span><br><span class="line">                <span class="keyword">if</span> (num &gt;= mid) &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (count &gt;= mid) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (count &lt; mid) &#123;</span><br><span class="line">                high = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                low = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Solution-2-統計個別論文引用數量"><a href="#Solution-2-統計個別論文引用數量" class="headerlink" title="Solution 2- 統計個別論文引用數量"></a>Solution 2- 統計個別論文引用數量</h2><p>先將論文引用次數各別計算統計在一個陣列cal[]中，用citations[i]來當作cal[]陣列的位置，由於H idex最大值為citations陣列長度，因此統計的陣列長度為<span class ="markWord">citations陣列長度+1</span> ，當citations[i]超過陣列長度時，視為<span class ="markWord">等於陣列長度</span>，統計完citations內的數量後在遍歷cal[]的數量算出h idex。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hIndex</span><span class="params">(<span class="type">int</span>[] citations)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> citations.length;</span><br><span class="line">        <span class="type">int</span>[] cal = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : citations) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num &gt; n) &#123;</span><br><span class="line">                cal[n]++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cal[num]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">hIdx</span> <span class="operator">=</span> n;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (hIdx &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            count += cal[hIdx];</span><br><span class="line">            <span class="keyword">if</span> (count &gt;= hIdx) &#123;</span><br><span class="line">                <span class="keyword">return</span> hIdx;</span><br><span class="line">            &#125;</span><br><span class="line">            hIdx--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode筆記</category>
        <category>Array</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 6. Zigzag Conversion</title>
    <url>/2023/10/26/011-LeetCode-6/</url>
    <content><![CDATA[<p>這題題目挺有趣的，花了一點時間才看懂題目範例的Z字排列方式，因為怎麼看都更像N字型😃，文字須按Z對角線排列如下圖，嘗試了許多方法，最後寫了兩種解法，最後一個則是在Leetcode上看到其他人精簡又兼具效能的寫法。</p>
<span id="more"></span>
<p><img src="/../image/leetcode6-1.png" alt="leetcode"></p>
<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p><img src="/../image/leetcode6.jpg" alt="leetcode"></p>
<h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h2><h3 id="解題步驟"><a href="#解題步驟" class="headerlink" title="解題步驟"></a>解題步驟</h3><ol>
<li>初始化一個大小為<span class="mark">numRows</span>的StringBuilder陣列來存放每一列的結果</li>
<li>依序遍歷每個字元存放到對應的StringBuilder陣列，直線表示陣列索引位置遞增，對角線表示遞減，用<span class="mark">flag </span>來控制走直線或對角線</li>
<li>在將StringBuilder陣列依序加總即可</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">convert</span><span class="params">(String s, <span class="type">int</span> numRows)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (numRows == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder[] strArr = <span class="keyword">new</span> <span class="title class_">StringBuilder</span>[numRows];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numRows; i++) &#123;</span><br><span class="line">            strArr[i] = <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> ch : s.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (idx &lt;= numRows &amp;&amp; flag) &#123;</span><br><span class="line">                strArr[idx++].append(ch);</span><br><span class="line">                <span class="keyword">if</span> (idx == numRows) &#123;</span><br><span class="line">                    <span class="comment">//當索引值++至numRows表示直線走到盡頭，flag設成false轉至對角線</span></span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="comment">//numRows - 2 表示從對角線第二個元素開始算起，因為第一個為直線和對角線的交會點，在直線的時候已經存過了</span></span><br><span class="line">                    idx = numRows - <span class="number">2</span> ;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!flag &amp;&amp; idx &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                strArr[idx--].append(ch);</span><br><span class="line">                <span class="keyword">if</span> (idx &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//須針對只有兩列的狀況做處理</span></span><br><span class="line">                    idx = numRows == <span class="number">2</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (StringBuilder str : strArr) &#123;</span><br><span class="line">            sb.append(str.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h2><p>方法一的方式須用flag來判斷直線或對角線，還要針對只有兩列的狀況作處理，後來想到可以一組直線到對角線為單位去存每個字元到對應的陣列索引，這樣不用針對2列的情況處理，code也簡單很多，只是與方法一的執行效能和記憶體是差不多的。</p>
<h3 id="解題步驟-1"><a href="#解題步驟-1" class="headerlink" title="解題步驟"></a>解題步驟</h3><ol>
<li>步驟一同上</li>
<li>起始索引為<span class="mark">0</span>，<span class="mark">0</span>至<span class="mark">numRows-1</span>為直線索引遞增，再將索引位置調整成<span class="mark">numRows - 2</span>，進入對角線迴圈索引遞減。</li>
<li>步驟三同上</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">convert</span><span class="params">(String s, <span class="type">int</span> numRows)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (numRows == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder[] strArr = <span class="keyword">new</span> <span class="title class_">StringBuilder</span>[numRows];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numRows; i++) &#123;</span><br><span class="line">            strArr[i] = <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">            row = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//遍歷直線</span></span><br><span class="line">            <span class="keyword">while</span> (row &lt; numRows &amp;&amp; i &lt; n) &#123;</span><br><span class="line">                strArr[row++].append(s.charAt(i++));</span><br><span class="line">            &#125;</span><br><span class="line">            row = numRows - <span class="number">2</span>;</span><br><span class="line">            <span class="comment">//遍歷對角線</span></span><br><span class="line">            <span class="keyword">while</span> (row &gt; <span class="number">0</span> &amp;&amp; i &lt; n) &#123;</span><br><span class="line">                strArr[row--].append(s.charAt(i++));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (StringBuilder str : strArr) &#123;</span><br><span class="line">            sb.append(str.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution 3"></a>Solution 3</h2><p>這題解法是來自<a href="https://leetcode.com/problems/zigzag-conversion/solutions/3489525/c-java-python-javascript-easy-to-understand-solution-with-explanation/">LeetCode</a>上的大神，內有詳細的解題說明，這個解法截至目前的為止Runtime和Memory都Beats 99%以上。</p>
<h3 id="解題步驟-2"><a href="#解題步驟-2" class="headerlink" title="解題步驟"></a>解題步驟</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">convert</span><span class="params">(String s, <span class="type">int</span> numRows)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (numRows == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">cycleLen</span> <span class="operator">=</span> <span class="number">2</span> * numRows - <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numRows; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j + i &lt; n; j += cycleLen) &#123;</span><br><span class="line">                result.append(s.charAt(j + i));</span><br><span class="line">                <span class="keyword">if</span> (i != <span class="number">0</span> &amp;&amp; i != numRows - <span class="number">1</span> &amp;&amp; j + cycleLen - i &lt; n) &#123;</span><br><span class="line">                    result.append(s.charAt(j + cycleLen - i));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode筆記</category>
        <category>Array</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 135. Candy</title>
    <url>/2023/10/20/010-LeetCode-135/</url>
    <content><![CDATA[<p>看到這題覺得蠻有趣，題目看起來描述得很簡單，但實際的邏輯還要想一下，題目是有若干糖果要分給一群小孩，分配糖果需滿足下列兩個條件:<br>a. 每個人至少要有一顆糖<br>b. 評分較高的孩子比隔壁的孩子獲得更多醣果</p>
<span id="more"></span>
<h2 id="解題邏輯"><a href="#解題邏輯" class="headerlink" title="解題邏輯"></a>解題邏輯</h2><ol>
<li>用一個陣列<span class="mark">candies</span>紀錄要分給<span class="mark">n</span>個小孩的糖果數，先由左到右依序比對評分<span class="mark">ratings</span>，如果第二個小孩比第一個小孩高分<span class="mark">ratings[1] &gt; ratings[0] </span>，糖果卻少於或等於第一個小孩的糖果數<span class="mark">candies[1] &lt;&#x3D; candies[0] </span>，則<span class="markWord">第二個小孩的糖果數為第一個小孩的糖果數+1</span> ➔ <span class="mark">candies[0] + 1</span>，以此類推…</li>
<li>由左到右(0~<span class="mark">n</span>)調整完分配的糖果數後，須再由右到左調整一次糖果數</li>
<li>加總所有糖果數<span class="mark">candies</span>，並各+1(每人至少要一顆糖)，加總完即為要分配的糖果數</li>
</ol>
<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p><img src="/../image/leecode135.jpg" alt="leetcode"></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">candy</span><span class="params">(<span class="type">int</span>[] ratings)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> ratings.length; </span><br><span class="line">        <span class="type">int</span>[] candies = <span class="keyword">new</span> <span class="title class_">int</span>[n]; </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ratings[i - <span class="number">1</span>] &lt; ratings[i] &amp;&amp; candies[i - <span class="number">1</span>] &gt;= candies[i]) &#123;</span><br><span class="line">                candies[i] = candies[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ratings[i + <span class="number">1</span>] &lt; ratings[i] &amp;&amp; candies[i + <span class="number">1</span>] &gt;= candies[i]) &#123;</span><br><span class="line">                candies[i] = candies[i + <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">totalCandies</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            totalCandies += candies[i] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> totalCandies;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode筆記</category>
        <category>Array</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 1409. Queries on a Permutation With Key</title>
    <url>/2023/10/16/009-LeetCode-1409/</url>
    <content><![CDATA[<p>這題需產生一個陣列<span class="mark">p</span>範圍為{1,2,3,..<span class="mark">m</span>}，再從<span class="mark">queries</span>陣列中各別找出對應到<span class="mark">p</span>陣列值的位置，再將對應到<span class="mark">p</span>的該數值移置陣列首位，繼續比對最後再將每次比對到的索引值存成陣列回傳。</p>
<span id="more"></span>

<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p><img src="/../image/leecode1409.jpg" alt="leetcode"></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ol>
<li>第一個for迴圈set p的資料</li>
<li>第二組for迴圈找出所有queries[j]對應到p[]的位置，並逐一改變其位置。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] processQueries(<span class="type">int</span>[] queries, <span class="type">int</span> m) &#123;</span><br><span class="line">        <span class="type">int</span>[] p = <span class="keyword">new</span> <span class="title class_">int</span>[m];</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[queries.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            p[i] = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; queries.length; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">                <span class="comment">// 找出queries中對應p[i]的索引，傳入updateIdx()</span></span><br><span class="line">                <span class="keyword">if</span> (queries[j] == p[i]) &#123;</span><br><span class="line">                    p = updateIdx(p, i, queries[j]);</span><br><span class="line">                    ans[j] = i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] updateIdx(<span class="type">int</span>[] arr, <span class="type">int</span> idx, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="comment">//調整索引值(含)以前的位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> idx; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="comment">//往後挪一個位置</span></span><br><span class="line">            arr[i] = arr[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//target移置首位</span></span><br><span class="line">        arr[<span class="number">0</span>] = target;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode筆記</category>
        <category>Array</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 68. Text Justification</title>
    <url>/2023/10/31/012-LeetCode-68/</url>
    <content><![CDATA[<p>這題出自於Leetcode的<span class="markWord">Top Interview 150</span>裡的<span class="mark">Array</span>類別，解完這題的時候挺有成就感的，刷Array的題目好一陣子，有把一些之前練習過的邏輯思考方法用上，也沒有卡在之前會卡住的地方，要解這題可以先加總單字組成足夠一行的長度(包含字和字中間至少間隔1個空格)，再將該行對應的索引傳入另一個function來處理單字與單字間的空格，要特別注意的是，最後一行的處理邏輯和前面的不同，如果最後一行長度不足，單字間只需空一格，剩下不足的長度則需空格再結尾處，前面的段落比較像是左右對齊，最後一行則是置左對齊。</p>
<span id="more"></span>
<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p><a href="https://leetcode.com/problems/text-justification/description/?envType=study-plan-v2&envId=top-interview-150">LeetCode-68</a><br><img src="/../image/leetcode68.jpg" alt="leetcode"></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h5 id="解題步驟"><a href="#解題步驟" class="headerlink" title="解題步驟"></a>解題步驟</h5><ol>
<li>計算單字各別長度加總直到符合<span class="mark">maxWidth</span>的長度，超過<span class="mark">maxWidth</span>則索引退回上一個</li>
<li>將當前該行的的索引值及剩餘需填補的空格傳入<span class="mark">getLine()</span>，計算出每個單字的間距並回傳該行</li>
<li>迴圈跑到最後一個字的時候有可能還不足一行的長度，因此需再<span class="mark">getLine()</span>一次</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">fullJustify</span><span class="params">(String[] words, <span class="type">int</span> maxWidth)</span> &#123;</span><br><span class="line">        List&lt;String&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        <span class="comment">//計算組成line長度，最後一個字不用+空格所以起始值設-1;</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; words.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (count &lt; maxWidth) &#123;</span><br><span class="line">                <span class="comment">//字元長度+預設空一格</span></span><br><span class="line">                count += words[i].length() + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (count &gt; maxWidth) &#123;</span><br><span class="line">                <span class="comment">//count超出一行長度，索引值須回上一個 -&gt; i-1</span></span><br><span class="line">                <span class="comment">//剩餘需填補的空格需再加回上一個字的長度及預設空一格 -&gt; maxWidth - count + words[i].length() + 1</span></span><br><span class="line">                ans.add(getLine(start, i - <span class="number">1</span>, words, maxWidth - count + words[i].length() + <span class="number">1</span>, maxWidth, <span class="literal">false</span>));</span><br><span class="line">                i -= <span class="number">1</span>;</span><br><span class="line">                start = i + <span class="number">1</span>;</span><br><span class="line">                count = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (count == maxWidth) &#123;</span><br><span class="line">                ans.add(getLine(start, i, words, maxWidth - count, maxWidth, <span class="literal">false</span>));</span><br><span class="line">                start = i + <span class="number">1</span>;</span><br><span class="line">                count = -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == words.length - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//最後一行字間固定空一格，因此需填補空格數無需計算</span></span><br><span class="line">                ans.add(getLine(start, i, words, <span class="number">0</span>, maxWidth, <span class="literal">true</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getLine</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end, String[] words, <span class="type">int</span> space, <span class="type">int</span> maxWidt, <span class="type">boolean</span> isLast)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SPACE</span> <span class="operator">=</span> <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rest</span> <span class="operator">=</span> space;</span><br><span class="line">        <span class="keyword">if</span> (start != end) &#123;</span><br><span class="line">            <span class="comment">//字間平均空格</span></span><br><span class="line">            space /= end - start;</span><br><span class="line">            <span class="comment">//除平均空格候剩餘空格</span></span><br><span class="line">            rest %= end - start;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">            sb.append(words[start++]);</span><br><span class="line">            <span class="comment">//預設空一格</span></span><br><span class="line">            sb.append(SPACE);</span><br><span class="line">            <span class="keyword">if</span> (!isLast) &#123;</span><br><span class="line">                <span class="comment">//不是最後一行則平均分配字間空格</span></span><br><span class="line">                sb.append(SPACE.repeat(rest-- &gt; <span class="number">0</span> ? space + <span class="number">1</span> : space));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(words[end]);</span><br><span class="line">        <span class="comment">//最後一行需填補行尾空格</span></span><br><span class="line">        sb.append(SPACE.repeat(maxWidt - sb.length()));</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode筆記</category>
        <category>Array</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 36. Valid Sudoku</title>
    <url>/2023/11/07/013-LeetCode-36/</url>
    <content><![CDATA[<p>這題出自於Leetcode的<span class="markWord">Top Interview 150</span>裡的<span class="mark">Matrix</span>類別，再解這題的時候，一開始我是分成三個function分別檢核，但後來看到其他人的code發現這樣寫更精簡，所以就用這樣方式自己再寫一次，題目要我們檢核一個二維陣列是否符合數獨的規範，因此我們可以透過下列步驟來一一檢核:</p>
<ol>
<li>檢核每行是否有1-9不重複，有重複即回傳false</li>
<li>檢核每列是否有1-9不重複，有重複即回傳false</li>
<li>檢核每個九宮格是否有1-9不重複，有重複即回傳false</li>
</ol>
<span id="more"></span>
<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p><a href="https://leetcode.com/problems/valid-sudoku/description/?envType=study-plan-v2&envId=top-interview-150">LeetCode-36</a><br><img src="/../image/leetcode36.png" alt="leetcode"></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidSudoku</span><span class="params">(<span class="type">char</span>[][] board)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; <span class="number">9</span>; x++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">0</span>; y &lt; <span class="number">9</span>; y++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[x][y] == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> board[x][y];</span><br><span class="line">                <span class="comment">//檢核的時候要去掉自己本身，因此將當前數字設為&#x27;.&#x27;</span></span><br><span class="line">                board[x][y] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                <span class="keyword">if</span> (!isCheck(board, x, y, ch)) </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="comment">//檢核完將&#x27;.&#x27;改回當前數字</span></span><br><span class="line">                board[x][y] = ch;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCheck</span><span class="params">(<span class="type">char</span>[][] board, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">char</span> num)</span> &#123;</span><br><span class="line">        <span class="comment">//步驟一:檢核每列是否與當前數字重複</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>; row &lt; <span class="number">9</span>; row++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[row][y] == num) </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="comment">//步驟二:檢核每行是否與當前數字重複</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; <span class="number">9</span>; col++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[x][col] == num) </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 步驟三:檢核當前數字是否與九宮格內的數字重複</span></span><br><span class="line">        <span class="comment">//九宮格的起始列</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sr</span> <span class="operator">=</span> (x / <span class="number">3</span>) * <span class="number">3</span>;</span><br><span class="line">        <span class="comment">//九宮格的起始行</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sc</span> <span class="operator">=</span> (y / <span class="number">3</span>) * <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> sr; i &lt; sr + <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> sc; j &lt; sc + <span class="number">3</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == num)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode筆記</category>
        <category>Matrix</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 48. Rotate Image</title>
    <url>/2023/11/09/013-LeetCode-48/</url>
    <content><![CDATA[<p>這題出自於Leetcode的<span class="markWord">Top Interview 150</span>裡的<span class="mark">Matrix</span>類別，這題也是我這三個多月在LeetCcde刷的第100題~剛好也把Matrix系列刷到一個段落，這題看起來很簡單，但也是需要想一下，我的作法是先反轉matrix陣列的順序，在將陣列內位置水平垂直對調就可以了，要注意的是在對調的時候要做判斷，不然就會重複對調最後的結果還是跟原本一樣，例如跑迴圈將matrix[0][1]改成matrix[1][0]，迴圈跑到matrix[1][0]的時候又會將matrix[1][0]改回matrix[0][1]。</p>
<span id="more"></span>
<p><img src="/../image/leetode48-2.jpg"></p>
<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p><a href="https://leetcode.com/problems/rotate-image/">LeetCode-48</a><br><img src="/../image/leetcode48.jpg" alt="leetcode-48"></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rotate</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> matrix.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n-<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//反轉matrix內陣列的順序</span></span><br><span class="line">        <span class="keyword">while</span>(i &gt;= n / <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="type">int</span>[] temp = matrix[j];</span><br><span class="line">            matrix[j++] = matrix[i];</span><br><span class="line">            matrix[i--] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//水平垂直位置對調</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="comment">//需判斷不會重複對調</span></span><br><span class="line">                <span class="keyword">if</span> (j &lt; i)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> matrix[j][i];</span><br><span class="line">                matrix[j][i] = matrix[i][j];</span><br><span class="line">                matrix[i][j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode筆記</category>
        <category>Matrix</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Collections筆記 (1/2)</title>
    <url>/2023/11/27/014-Java%20Collections-1/</url>
    <content><![CDATA[<p>準備面試常會遇到考各種Java Collections的題目，例如什麼情境適合使用哪個collection或是他們個別的特色是什麼之類的，因此想專門整理關於Java Collections的筆記，會分成幾個類別，這篇會介紹Set、Map和List類的常用集合，下一篇則是Queue、Deque、Stack和Vector以及最後總整理。</p>
<span id="more"></span>
<p><img src="/../image/Collections.png"></p>
<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p>HashSet用來儲存<span class="markWord">唯一的元素並忽略重複值</span>，HashSet 使用hash code來確保元素的唯一性，並且查詢元素的時間複雜度為 O(1)。</p>
<h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><p>跟HashSet一樣用來儲存唯一的元素並忽略重複值，TreeSet是一個<span class="markWord">有序的集合</span>，使用<a href="https://clu.gitbook.io/data-structure-note/1.4.3-red-black-tree">紅黑樹（Red-Black Tree)</a>實現，元素將根據其自然排序或自定義排序進行排序，時間複雜度是O(log n)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自然排序，無定義時預設為遞增排序</span></span><br><span class="line">TreeSet&lt;Integer&gt; nums = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;Integer&gt;();</span><br><span class="line">nums.add(<span class="number">5</span>);</span><br><span class="line">nums.add(<span class="number">8</span>);</span><br><span class="line">nums.add(<span class="number">9</span>);</span><br><span class="line"><span class="comment">//結果:[5, 8, 9]</span></span><br><span class="line">TreeSet&lt;String&gt; treeSet = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;String&gt;();</span><br><span class="line">treeSet.add(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">treeSet.add(<span class="string">&quot;Orange&quot;</span>);</span><br><span class="line">treeSet.add(<span class="string">&quot;Banana&quot;</span>);</span><br><span class="line"><span class="comment">//結果:[Apple, Banana, Orange]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//自定義遞減排序</span></span><br><span class="line">TreeSet&lt;Integer&gt; nums = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;Integer&gt;(Comparator.reverseOrder());</span><br><span class="line">nums.add(<span class="number">5</span>);</span><br><span class="line">nums.add(<span class="number">8</span>);</span><br><span class="line">nums.add(<span class="number">9</span>);</span><br><span class="line"><span class="comment">//結果:[9, 8, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//按照元素的某個屬性排序</span></span><br><span class="line">TreeSet&lt;Person&gt; treeSet = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;Person&gt;(Comparator.comparing(Person::getAge));</span><br><span class="line">treeSet.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">23</span>));</span><br><span class="line">treeSet.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Bob&quot;</span>, <span class="number">43</span>));</span><br><span class="line">treeSet.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Joe&quot;</span>, <span class="number">35</span>));</span><br></pre></td></tr></table></figure>
<p>HashSet 適用於查詢需要較快的情況，而 TreeSet 適用於需要元素排序的情況。通常在不需要排序的情況下，HashSet 的查詢效率更高。</p>
<h3 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h3><p>和TreeSet不同的地方是LinkedHashSet是<span class="markWord">按元素插入的順序來排序</span>，插入的順序就是遍歷出來的順序，整體效能比TreeSet好。</p>
<h3 id="CopyOnWriteArraySet"><a href="#CopyOnWriteArraySet" class="headerlink" title="CopyOnWriteArraySet"></a>CopyOnWriteArraySet</h3><p>底層的儲存結構是CopyOnWriteArrayList，具備<span class="markWord">Thread-safe</span>的特性，在遍歷的時候不會拋出ConcurrentModificationException，因為在修改集合的時候，他會將底層的數組進行複製，確保遍歷的一致性，但也因為每次修改都需複製整個數組，修改的代價較高，適合用於需要高效讀取、較少修改的情況下使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CopyOnWriteArraySetExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        CopyOnWriteArraySet&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArraySet</span>&lt;String&gt;();</span><br><span class="line">        set.add(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;Banana&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;Orange&quot;</span>);</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">iteratorTask</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">            Iterator&lt;String&gt; itor = set.iterator();</span><br><span class="line">            <span class="keyword">while</span> (itor.hasNext()) &#123;</span><br><span class="line">                System.out.println(itor.next());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">modifyThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            set.add(<span class="string">&quot;Grape&quot;</span>);</span><br><span class="line">            set.remove(<span class="string">&quot;orange&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">itorThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(iteratorTask);</span><br><span class="line">        modifyThread.start();</span><br><span class="line">        itorThread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>無順序性，查詢、插入、刪除速度快，時間複雜度為O(1)，<span class="markWord">Key和Value都允許null</span></p>
<h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h3><p>和TreeSet一樣，按<span class="markWord">自然排序或自定義排序</span>，Key不可為null，效能較HashMap低。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定義排序</span></span><br><span class="line">SortedMap&lt;String, Double&gt; myMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;String, Double&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;String&gt;() &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(String o1, String o2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h3><p>保留<span class="markWord">元素插入的順序</span>，效能介於HashMap和TreeMap之間，Key和Value皆可為null</p>
<h3 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h3><p>和CopyOnWriteArraySet一樣具備Thread-safe的特性，使用<span class="markWord">分段鎖(Segment Lock)</span>實現，每個分段相當於一個小的HashMap，各自獨立鎖定，允許多執行緒同時讀取，只在寫入操作時同步，但空間的需求也較HashMap大，因為它需維護多個分段。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcurrentMapExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Map&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;one&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">&quot;two&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        map.put(<span class="string">&quot;three&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">modifyTask</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">            map.put(<span class="string">&quot;four&quot;</span>, <span class="number">4</span>);</span><br><span class="line">            map.remove(<span class="string">&quot;three&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">iteratorTask</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">            Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; itor = map.entrySet().iterator();</span><br><span class="line">            <span class="keyword">while</span> (itor.hasNext()) &#123;</span><br><span class="line">                Map.Entry&lt;String, Integer&gt; entry = itor.next();</span><br><span class="line">                System.out.println(entry.getKey() + <span class="string">&quot;:&quot;</span> + entry.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">modifyThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(modifyTask);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">itorThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(iteratorTask);</span><br><span class="line">        modifyThread.start();</span><br><span class="line">        itorThread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p>ArrayList的特性是大小是可動態調整的，不需在建立的時候指定大小，透過索引可直接訪問元素，允許元素重複，動態增加數組，查詢元素的<span class="markWord">時間複雜度為 O(1)</span>，適合用於需動態增長數據、頻繁讀取較少修改的情境。</p>
<h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><p>和ArrayList不同的是，LinkedList基於<span class="markWord">雙向鏈結</span>來實現，每個節點都包含對前一個和後一個節點的引用，這使得插入或刪除元素的效率更高，同時實作List和Deque介面，適合用於需頻繁使用插入和刪除的情境。</p>
<h3 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h3><p>是ArrayList同步的版本，和CopyOnWriteArraySet一樣修改集合的時候都會將底層的數組進行複製，因此修改的代價較高，適合用於頻繁讀取較少修改的情境。</p>
<h5 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料:"></a>參考資料:</h5><ul>
<li><a href="https://www.digitalocean.com/community/tutorials/collections-in-java-tutorial">https://www.digitalocean.com/community/tutorials/collections-in-java-tutorial</a></li>
<li><a href="https://www.runoob.com/java/java-collections.html">https://www.runoob.com/java/java-collections.html</a></li>
<li><a href="https://clu.gitbook.io/data-structure-note/1.4.3-red-black-tree">https://clu.gitbook.io/data-structure-note/1.4.3-red-black-tree</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Collections</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Collections筆記 (2/2)</title>
    <url>/2023/12/01/015-Java%20Collections-2/</url>
    <content><![CDATA[<p>上一篇介紹完map、set和List類別後，這篇要繼續把剩下的常用Java Collections整理完，那就開始吧~</p>
<span id="more"></span>
<p><img src="/../image/Collections.png"></p>
<h2 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h2><p>Queue是一種<span class="markWord">先進先出(FIFO)</span>的數據結構，新元素被添加到列隊的尾部，而元素從列隊中移除是從頭部開始移除，<span class="markWord">不允許重複的元素但元素允許是null</span>，有些Queue的實作允許限制列隊的容量，當達到容量上限時，新插入的操作可能會被阻塞或返回錯誤。</p>
<h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><p>可實作Queue，實現標準的FIFO列隊。</p>
<h3 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h3><p>透過二元堆積(Binary Heap)來實現，<span class="markWord">元素按照優先級來排序</span>，確保從列隊中取出的元素具有最高優先級，跟Queue不同的是PriorityQueue元素不可以是null，因為在排序會有問題。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PriorityQueueExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// Create a priority queue with initial capacity 10</span></span><br><span class="line">        PriorityQueue&lt;Integer&gt; pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">// Add elements to the queue</span></span><br><span class="line">        pq.add(<span class="number">3</span>);</span><br><span class="line">        pq.add(<span class="number">1</span>);</span><br><span class="line">        pq.add(<span class="number">2</span>);</span><br><span class="line">        pq.add(<span class="number">5</span>);</span><br><span class="line">        pq.add(<span class="number">4</span>);</span><br><span class="line">        <span class="comment">// Print the queue</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Priority queue: &quot;</span> + pq);</span><br><span class="line">        <span class="comment">// Peek at the top element of the queue</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Peek: &quot;</span> + pq.peek());</span><br><span class="line">        <span class="comment">// Remove the top element of the queue</span></span><br><span class="line">        pq.poll();</span><br><span class="line">        <span class="comment">// Print the queue again</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Priority queue after removing top element: &quot;</span> + pq);</span><br><span class="line">        <span class="comment">// Check if the queue contains a specific element</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Does the queue contain 3? &quot;</span> + pq.contains(<span class="number">3</span>));</span><br><span class="line">        <span class="comment">// Get the size of the queue</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Size of queue: &quot;</span> + pq.size());</span><br><span class="line">        <span class="comment">// Remove all elements from the queue</span></span><br><span class="line">        pq.clear();</span><br><span class="line">        <span class="comment">// Check if the queue is empty</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Is the queue empty? &quot;</span> + pq.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// Priority queue: [1, 3, 2, 5, 4]</span></span><br><span class="line"><span class="comment">// Peek: 1</span></span><br><span class="line"><span class="comment">// Priority queue after removing top element: [2, 3, 4, 5]</span></span><br><span class="line"><span class="comment">// Does the queue contain 3? true</span></span><br><span class="line"><span class="comment">// Size of queue: 4</span></span><br><span class="line"><span class="comment">// Is the queue empty? true</span></span><br></pre></td></tr></table></figure>
<h3 id="BlockingQueue"><a href="#BlockingQueue" class="headerlink" title="BlockingQueue"></a>BlockingQueue</h3><p>具Thread-safe，除了具有Queue先進先出及操作元素進出的方法，還<span class="markWord">提供多執行緒等待元素進出的操作</span>，一般Queue在插入取出元素失敗時會拋出例外(IllegalStateException)或返回特定值，但BlockingQueue會先被Block阻塞，直到該操作在之後可以成功，BlockingQueue又分為<span class="markWord">有界列隊(bounded blocking queue)</span>和<span class="markWord">無界列隊(unbounded blocking queue)</span>，差別為有無最大空間限制，BlockingQueue的實作又有下列幾項:</p>
<h4 id="ArrayBlockingQueue"><a href="#ArrayBlockingQueue" class="headerlink" title="ArrayBlockingQueue"></a>ArrayBlockingQueue</h4><p>基於數組的有界列隊，支持先進先出、阻塞的插入和刪除操作。</p>
<h4 id="LinkedBlockingQueue"><a href="#LinkedBlockingQueue" class="headerlink" title="LinkedBlockingQueue"></a>LinkedBlockingQueue</h4><p>基於鏈表的有界或無界列隊，支持先進先出、阻塞的插入和刪除操作。</p>
<h4 id="PriorityBlockingQueue"><a href="#PriorityBlockingQueue" class="headerlink" title="PriorityBlockingQueue"></a>PriorityBlockingQueue</h4><p>基於優先級堆的無界列隊，元素按優先級排序，支持阻塞的插入和刪除操作。</p>
<h4 id="DelayQueue"><a href="#DelayQueue" class="headerlink" title="DelayQueue"></a>DelayQueue</h4><p>基於優先級堆的無界列隊，元素時做Delayed，具有一定的延遲時間，支持阻塞的插入和刪除操作。</p>
<h4 id="SynchronousQueue"><a href="#SynchronousQueue" class="headerlink" title="SynchronousQueue"></a>SynchronousQueue</h4><p>一個僅包含一個元素的列隊，用於在生產者和消費者之間傳遞單個元素，<span class="markWord">不保存元素</span>，僅作為一個同步點。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BlockingQueueExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 創建一個 LinkedBlockingQueue 實例</span></span><br><span class="line">        <span class="type">BlockingQueue</span> <span class="variable">blockingQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 創建生產者線程</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">producer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 生產者放入元素</span></span><br><span class="line">                blockingQueue.put(<span class="string">&quot;Element 1&quot;</span>);</span><br><span class="line">                blockingQueue.put(<span class="string">&quot;Element 2&quot;</span>);</span><br><span class="line">                blockingQueue.put(<span class="string">&quot;Element 3&quot;</span>);</span><br><span class="line">                <span class="comment">// 注意：如果隊列已滿，put 操作會阻塞等待空間</span></span><br><span class="line">                blockingQueue.put(<span class="string">&quot;Element 4&quot;</span>);</span><br><span class="line">                <span class="comment">// 程式將阻塞在這裡，直到有空間為止</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 創建消費者線程</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 消費者取出元素</span></span><br><span class="line">                System.out.println(<span class="string">&quot;Consumer takes: &quot;</span> + blockingQueue.take());</span><br><span class="line">                System.out.println(<span class="string">&quot;Consumer takes: &quot;</span> + blockingQueue.take());</span><br><span class="line">                System.out.println(<span class="string">&quot;Consumer takes: &quot;</span> + blockingQueue.take());</span><br><span class="line">                <span class="comment">// 注意：如果隊列已空，take 操作會阻塞等待元素</span></span><br><span class="line">                System.out.println(<span class="string">&quot;Consumer takes: &quot;</span> + blockingQueue.take());</span><br><span class="line">                <span class="comment">// 程式將阻塞在這裡，直到有元素為止</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 啟動生產者和消費者線程</span></span><br><span class="line">        producer.start();</span><br><span class="line">        consumer.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Deque"><a href="#Deque" class="headerlink" title="Deque"></a>Deque</h2><p>Deque支持在<span class="markWord">兩端進行插入和刪除的操作</span>，可以在頭部(front)和尾部(rear)同時進行元素的添加、移除和檢索，不允許重複的元素但允許null。</p>
<h3 id="ArrayDeque"><a href="#ArrayDeque" class="headerlink" title="ArrayDeque"></a>ArrayDeque</h3><p>基於動態數組實現，支持雙端列隊，容量可動態增長。</p>
<h3 id="LinkedList-1"><a href="#LinkedList-1" class="headerlink" title="LinkedList"></a>LinkedList</h3><p>基於雙向鏈結實現，同樣支持雙端列隊，插入刪除速度較ArrayDeque快。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DequeExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用 ArrayDeque</span></span><br><span class="line">        <span class="type">Deque</span> <span class="variable">arrayDeque</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        arrayDeque.addFirst(<span class="string">&quot;First&quot;</span>);</span><br><span class="line">        arrayDeque.addLast(<span class="string">&quot;Last&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;ArrayDeque: &quot;</span> + arrayDeque);</span><br><span class="line">        System.out.println(<span class="string">&quot;First Element: &quot;</span> + arrayDeque.getFirst());</span><br><span class="line">        System.out.println(<span class="string">&quot;Last Element: &quot;</span> + arrayDeque.getLast());</span><br><span class="line">        <span class="comment">// 使用 LinkedList</span></span><br><span class="line">        <span class="type">Deque</span> <span class="variable">linkedList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        linkedList.addFirst(<span class="string">&quot;First&quot;</span>);</span><br><span class="line">        linkedList.addLast(<span class="string">&quot;Last&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;LinkedList: &quot;</span> + linkedList);</span><br><span class="line">        linkedList.removeFirst();</span><br><span class="line">        linkedList.removeLast();</span><br><span class="line">        System.out.println(<span class="string">&quot;update LinkedList: &quot;</span> + linkedList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><p>可動態調整大小，Vector中所有方法都是<span class="markWord">同步(Synchronized)的</span>，若不是多執行緒的情況下可考慮使用ArrayList或LinkedList作替代效能較好。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Vector&lt;String&gt; vector= <span class="keyword">new</span> <span class="title class_">Vector</span>&lt;&gt;();</span><br><span class="line">vector.add(<span class="string">&quot;Element 1&quot;</span>);</span><br><span class="line">vector.add(<span class="string">&quot;Element 2&quot;</span>);</span><br><span class="line">vector.add(<span class="string">&quot;Element 3&quot;</span>);</span><br><span class="line">System.out.println(vector.get(<span class="number">0</span>));</span><br></pre></td></tr></table></figure>
<h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><p>Stack是Vector的子類別，<span class="markWord">後進先出(LIFO)</span>的數據結構，最後添加的元素會最先被移除，常見的方法包括push(插入元素到堆疊頂部)和pop(彈出堆疊頂部的元素)，常用於需要按照相反順序處理元素的情境。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stack&lt;String&gt; stack= <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">stack.push(<span class="string">&quot;Element 1&quot;</span>);</span><br><span class="line">stack.push(<span class="string">&quot;Element 2&quot;</span>);</span><br><span class="line">stack.push(<span class="string">&quot;Element 3&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;stack:&quot;</span> + stack);</span><br><span class="line"><span class="type">String</span> <span class="variable">pop</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">System.out.println(<span class="string">&quot;pop element:&quot;</span> + pop);</span><br></pre></td></tr></table></figure>
<h2 id="Collections比較"><a href="#Collections比較" class="headerlink" title="Collections比較"></a>Collections比較</h2><table>
<thead>
<tr>
<th>集合</th>
<th>排序</th>
<th>隨機訪問</th>
<th>Key-Value</th>
<th>重複元素</th>
<th>null元素</th>
<th>執行緒安全</th>
</tr>
</thead>
<tbody><tr>
<td>ArrayList</td>
<td>&#10004;</td>
<td>&#10004;</td>
<td>&#10008;</td>
<td>&#10004;</td>
<td>&#10004;</td>
<td>&#10008;</td>
</tr>
<tr>
<td>LinkedList</td>
<td>&#10004;</td>
<td>&#10008;</td>
<td>&#10008;</td>
<td>&#10004;</td>
<td>&#10004;</td>
<td>&#10008;</td>
</tr>
<tr>
<td>HashSet</td>
<td>&#10008;</td>
<td>&#10008;</td>
<td>&#10008;</td>
<td>&#10008;</td>
<td>&#10004;</td>
<td>&#10008;</td>
</tr>
<tr>
<td>TreeSet</td>
<td>&#10004;</td>
<td>&#10008;</td>
<td>&#10008;</td>
<td>&#10008;</td>
<td>&#10008;</td>
<td>&#10008;</td>
</tr>
<tr>
<td>HashMap</td>
<td>&#10008;</td>
<td>&#10004;</td>
<td>&#10004;</td>
<td>&#10008;</td>
<td>&#10004;</td>
<td>&#10008;</td>
</tr>
<tr>
<td>TreeMap</td>
<td>&#10004;</td>
<td>&#10004;</td>
<td>&#10004;</td>
<td>&#10008;</td>
<td>&#10008;</td>
<td>&#10008;</td>
</tr>
<tr>
<td>Vector</td>
<td>&#10004;</td>
<td>&#10004;</td>
<td>&#10008;</td>
<td>&#10004;</td>
<td>&#10004;</td>
<td>&#10004;</td>
</tr>
<tr>
<td>Hashtable</td>
<td>&#10008;</td>
<td>&#10004;</td>
<td>&#10004;</td>
<td>&#10008;</td>
<td>&#10008;</td>
<td>&#10004;</td>
</tr>
<tr>
<td>Properties</td>
<td>&#10008;</td>
<td>&#10004;</td>
<td>&#10004;</td>
<td>&#10008;</td>
<td>&#10008;</td>
<td>&#10004;</td>
</tr>
<tr>
<td>Stack</td>
<td>&#10004;</td>
<td>&#10008;</td>
<td>&#10008;</td>
<td>&#10004;</td>
<td>&#10004;</td>
<td>&#10004;</td>
</tr>
<tr>
<td>CopyOnWriteArrayList</td>
<td>&#10004;</td>
<td>&#10004;</td>
<td>&#10008;</td>
<td>&#10004;</td>
<td>&#10004;</td>
<td>&#10004;</td>
</tr>
<tr>
<td>ConcurrentHashMap</td>
<td>&#10008;</td>
<td>&#10004;</td>
<td>&#10004;</td>
<td>&#10008;</td>
<td>&#10008;</td>
<td>&#10004;</td>
</tr>
<tr>
<td>CopyOnWriteArraySet</td>
<td>&#10008;</td>
<td>&#10008;</td>
<td>&#10008;</td>
<td>&#10008;</td>
<td>&#10004;</td>
<td>&#10004;</td>
</tr>
</tbody></table>
<h5 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料:"></a>參考資料:</h5><ul>
<li><a href="https://www.digitalocean.com/community/tutorials/collections-in-java-tutorial">https://www.digitalocean.com/community/tutorials/collections-in-java-tutorial</a></li>
<li><a href="https://www.runoob.com/java/java-collections.html">https://www.runoob.com/java/java-collections.html</a></li>
<li><a href="https://openhome.cc/Gossip/JavaGossip-V2/BlockingQueue.htm">https://openhome.cc/Gossip/JavaGossip-V2/BlockingQueue.htm</a></li>
<li><a href="https://matthung0807.blogspot.com/2021/01/java-blockingqueue-introduction.html">https://matthung0807.blogspot.com/2021/01/java-blockingqueue-introduction.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Collections</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用Render免費部署網頁? (2/3)建置PostgresSQL資料庫</title>
    <url>/2024/06/01/016-Render-2/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前有分享如何將前端的專案部署到Render伺服器上，考量到之前使用的Linode每個月要持續付租用的費用，而Render提供的免費資源對side project來說也很夠用，最近就研究把後端的專案及資料庫一併的架設在Render上，因此這篇就想來分享如何使用Render提供的PostgresSQL來建置資料庫</p>
<span id="more"></span>

<h2 id="建置資料庫"><a href="#建置資料庫" class="headerlink" title="建置資料庫"></a>建置資料庫</h2><p>點選&gt; New+ &gt; PostgresSQL<br><img src="/../image/render11.jpg" alt="render"></p>
<p>接著就會進入相關的設定頁，這邊要特別注意的是，<span class="markWord">如果是要用在Render上建置的網頁連接這個資料庫，資料庫伺服器的區域要跟網頁伺服器的區域一樣</span>，然後如果選擇的是免費的方案，目前是只能使用30天，30天後資料庫就會被刪除，但到期前Render會寄信問你要不要續約<br><img src="/../image/render12.jpg" alt="render"></p>
<p>建置完成後就可以從DashBoard進到我們剛建置好的資料庫，上面可以看到我們剛才建置的資訊，及目前資料庫的使用量<br><img src="/../image/render13.jpg" alt="render"></p>
<p>到Connection的地方就有資料庫的連線資訊，內部、外部連結的URL、使用者名稱、使用者密碼等<br><img src="/../image/render14.jpg" alt="render"></p>
<h2 id="管理資料庫"><a href="#管理資料庫" class="headerlink" title="管理資料庫"></a>管理資料庫</h2><p>透過這些資訊我們就可以下載<a href="https://www.pgadmin.org/download/">pgAdmin</a>來連到我們的資料庫查看，安裝好pgAdmin軟體後打開，對Server右鍵 &gt; Register &gt; Server<br><img src="/../image/render15.jpg" alt="render"></p>
<p>General &gt; 輸入Server名稱<br><img src="/../image/render16.jpg" alt="render"></p>
<p>接著到Connection&gt; 輸入連線資訊</p>
<ol>
<li><strong>Host Name&#x2F;Address</strong> 這邊要貼的是Render上的外部連結(External Database URL)，但不是全部直接貼上，網址的構成是：postgres:&#x2F;&#x2F;[username]:[password]@<span class="markWord">[hostname].[伺服器位置].render.com</span>&#x2F;[database]，我們要貼的是從@的地方開始，然後到.com的地方結束就好</li>
<li><strong>Port</strong> 連接的port為5432</li>
<li><strong>Maintaince Database</strong> 資料庫名稱</li>
<li><strong>Username</strong> 使用者名稱</li>
<li><strong>Password</strong> 資料庫連線密碼</li>
</ol>
<p><img src="/../image/render17.jpg" alt="render"></p>
<p>輸入完按Save，再點Server就會看到我們設定好的資料庫連線<br><img src="/../image/render18.jpg" alt="render"></p>
<h2 id="專案連線資料庫"><a href="#專案連線資料庫" class="headerlink" title="專案連線資料庫"></a>專案連線資料庫</h2><p>資料庫都設定完成後，接下來就是要修改我們專案的資料庫連線設定，由於我專案之前是使用MySQL，因此須將相關元件改成PostgresSQL</p>
<h3 id="build-gradle設定"><a href="#build-gradle設定" class="headerlink" title="build.gradle設定"></a>build.gradle設定</h3><p><img src="/../image/render19.jpg" alt="render"></p>
<h3 id="連線設定"><a href="#連線設定" class="headerlink" title="連線設定"></a>連線設定</h3><p>記得這個時候我們要貼的URL是內部連結的那個，到時候專案部署到Render上才會是走內部連線，如果Local端要連的話就使用外部連結，ssl要設成true<br><img src="/../image/render21.jpg" alt="render"><br><img src="/../image/render20.jpg" alt="render"></p>
<hr>
]]></content>
      <categories>
        <category>Server</category>
        <category>Render</category>
      </categories>
      <tags>
        <tag>Render</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用Render免費部署網頁? (3/3)部署後端專案</title>
    <url>/2024/06/01/017-Render-3%20copy/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇分享在Render上建置資料庫，並做好相關的連線設定，接著我們就要把後端專案部署到Render上，來完成Render前後端部署啦</p>
<span id="more"></span>
<h2 id="設置DockerFile"><a href="#設置DockerFile" class="headerlink" title="設置DockerFile"></a>設置DockerFile</h2><p>和建置前端專案一樣，須將專案先傳到github上，由於我們後端專案使用Docker部署，因此需在專案根目錄下建立Dockerfile，到時候Render就會根據這個檔案來自動建置及部署，下面是我Dockerfile的設定，須根據專案的不同自行調整。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> gradle:jdk11-jammy AS builder</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /home/gradle/project</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> gradle build --no-daemon</span></span><br><span class="line"><span class="keyword">FROM</span> tomcat:<span class="number">9</span>-jdk11-openjdk-slim AS tomcat</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">rm</span> -rf /usr/local/tomcat/webapps/*</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder /home/gradle/project/build/libs/JOLServer-1.1.1-plain.war /usr/local/tomcat/webapps/jolserver.war</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;catalina.sh&quot;</span>, <span class="string">&quot;run&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<h2 id="創建Web-Service"><a href="#創建Web-Service" class="headerlink" title="創建Web Service"></a>創建Web Service</h2><p>註冊完登入進去後就可以進到render的dashborad，點選&gt; New+ &gt; Web Service<br><img src="/../image/render2.jpg" alt="render"></p>
<p>這邊它會幫你直接把你有的repository列出來，選擇一個你要佈署的repository點選connect<br><img src="/../image/render3.jpg" alt="render"></p>
<p>如果你的repository沒有出現在列表上，可以點旁邊的「Configure account」進入到 GitHub 頁面調整一下權限，可能是你的GitHub 帳號在註冊時沒有給予 Render 權限，因此你可以在這邊重新給予權限。到 GitHub 之後，你就可以在底下選擇你要「All repositories」還是「Only select repositories」，而這邊我是選擇「Only select repositories」，選好你要部署的儲存庫後，按下 Save 按鈕，就會被自動回到 Render 頁面就可以看到它出現在你的列表上了<br><img src="/../image/render4.jpg" alt="render"></p>
<p>點選connect之後就可以會進入到伺服器設定畫面<br><img src="/../image/render9.jpg" alt="render"><br>Runtime這邊選Docker</p>
<p>接著就可以點Create Web Service來開始佈署專案啦，然後就可以看到佈署過程的log<br>最後看到<span class="markWord"> Your service is live</span>或是Dashboard狀態顯示<span class="markWord">Deployed</span>就代表已經佈署完成了，就可以點選左上方的網址來查看佈署好的網頁，如果發現狀態是Fail，可以查看log看有沒有什麼錯誤訊息，如果想要手動再次部署，可以點右上角的<span class="markWord">Manual Deploy</span>，可以選擇部署上一次的commit或是特定一次的commit。<br><img src="/../image/render10.jpg" alt="render"></p>
<p>另外，如果你也是想用Render部署的前端專案去連後端專案，須加上<span class="markWord">@CrossOrigin</span>的Annotation來處理跨域請求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@CrossOrigin(origins = &quot;http://frontend.com&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/data&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Some data&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這樣我們就完成在Render的前後端網頁部署啦，我們使用免費的方案，因此也有個小缺點，如果我們部署的Server 15分鐘內沒有活動的話，Server就會自動Shut Down，下次再進到網頁的時候就會需要等個幾分鐘Server啟動的時間，如果是前後端+資料庫就會需要大概5分鐘的啟動時間，不是網頁壞掉只需要耐心等待囉。</p>
<p><a href="https://jol-boutique.onrender.com/">查看我部署的網頁</a></p>
<hr>
]]></content>
      <categories>
        <category>Server</category>
        <category>Render</category>
      </categories>
      <tags>
        <tag>Render</tag>
      </tags>
  </entry>
  <entry>
    <title>在Linux Ubuntu安裝Jenkins</title>
    <url>/2024/06/02/018-%E5%9C%A8Ubuntu%E5%AE%89%E8%A3%9DJenkins/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前在Linode上有租Server，並部署前後端專案上去，想了解可以參考<a href="https://jenny83318.github.io/categories/Server/Linode/">這裡</a>，但是每次要部署都要手動打包部署真的蠻麻煩的，因此想透過Jenkins來完成CI&#x2F;CD，並邊紀錄學習的過程，我租的Server的系統版本是Ubuntu 22.04.2 LTS，Java版本是11，可以參考<a href="https://www.jenkins.io/doc/book/platform-information/support-policy-java/">Jenkins</a>官方提供的Java版本支援，找到適合自己安裝的版本。</p>
<span id="more"></span>
<h2 id="安裝Jenkins"><a href="#安裝Jenkins" class="headerlink" title="安裝Jenkins"></a>安裝Jenkins</h2><h3 id="確認Java環境及配置"><a href="#確認Java環境及配置" class="headerlink" title="確認Java環境及配置"></a>確認Java環境及配置</h3><p>確認是否有安裝Java環境以及Jenkins支援的版本，並設置好JAVA HOME的位置</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看JAVA_HOME位置</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span></span><br><span class="line"><span class="comment">#設置 JAVA_HOME</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/bin/java</span><br></pre></td></tr></table></figure>
<h3 id="安裝Jenkins-1"><a href="#安裝Jenkins-1" class="headerlink" title="安裝Jenkins"></a>安裝Jenkins</h3><p>Jenkins的版本有分成長期支援(12週更新一版)LTS和每周更新一版的短期版本，這邊我是選LTS版本來安裝</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \</span><br><span class="line">  https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc]&quot;</span> \</span><br><span class="line">  https://pkg.jenkins.io/debian-stable binary/ | sudo <span class="built_in">tee</span> \</span><br><span class="line">  /etc/apt/sources.list.d/jenkins.list &gt; /dev/null</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install jenkins</span><br></pre></td></tr></table></figure>

<h3 id="啟動Jenkins"><a href="#啟動Jenkins" class="headerlink" title="啟動Jenkins"></a>啟動Jenkins</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#啟動Jenkins服務</span></span><br><span class="line">systemctl start jenkins.service</span><br><span class="line"><span class="comment">#停止Jenkins服務</span></span><br><span class="line">systemctl stop jenkins.service</span><br></pre></td></tr></table></figure>

<h3 id="檢查Jenkins狀態"><a href="#檢查Jenkins狀態" class="headerlink" title="檢查Jenkins狀態"></a>檢查Jenkins狀態</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl status jenkins.service</span><br></pre></td></tr></table></figure>
<p><img src="/../image/jenkins1.jpg"><br>如果出現狀態是Active，就代表成功啟動啦，如果是Fail的話可以透過下面的指令來查看進一步的訊息，或是重新安裝Jenkins</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看 Jenkins log</span></span><br><span class="line">sudo journalctl -xeu jenkins.service</span><br><span class="line"><span class="comment">#解除安裝Jenkins</span></span><br><span class="line">sudo apt purge jenkins</span><br><span class="line"><span class="comment">#安裝Jenkins</span></span><br><span class="line">sudo apt install jenkins</span><br></pre></td></tr></table></figure>
<h2 id="設定防火牆"><a href="#設定防火牆" class="headerlink" title="設定防火牆"></a>設定防火牆</h2><p>可以先查看防火牆狀態是否為active</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo ufw status</span><br></pre></td></tr></table></figure>
<p>如果是開通的狀態，設定允許Jenkins預設的8080 port</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo ufw allow 8080</span><br></pre></td></tr></table></figure>
<p>如果狀態是inactive，先允許OPEN SSH在啟用防火牆</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo ufw allow OpenSSH</span><br><span class="line">sudo ufw <span class="built_in">enable</span></span><br></pre></td></tr></table></figure>
<p>再次查看狀態就可以看到8080 port狀態是ALLOW，防火牆也變成active<br><img src="/../image/jenkins2.jpg"></p>
<h2 id="設定Jenkins"><a href="#設定Jenkins" class="headerlink" title="設定Jenkins"></a>設定Jenkins</h2><p>輸入你的網址<a href="http://your_server_ip_or_domain:8080/">http://your_server_ip_or_domain:8080</a> 就會看到解鎖Jenkins的畫面<br><img src="/../image/jenkins3.jpg"><br>輸入下面指令會出現32位數的密碼，將密碼貼上按繼續</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">cat</span> /var/lib/jenkins/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure>
<p>這邊就選安裝推薦外掛<br><img src="/../image/jenkins4.jpg"><br>這邊要建立第一個使用者的資料，也可以略過以Admin的身分繼續<br><img src="/../image/jenkins5.jpg"><br>設定完就會出現這個畫面啦，點開始使用Jenkins就可以到Jenkis的儀錶板啦<br><img src="/../image/jenkins6.jpg"><br><img src="/../image/jenkins7.jpg"></p>
<p>到這裡就完成Jenkins的安裝啦</p>
<hr>
]]></content>
      <categories>
        <category>Server</category>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
</search>
